{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"maybe.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/globals/maybe.ts"],"sourcesContent":["export function maybe<T>(thunk: () => T): T | undefined {\n  try {\n    return thunk();\n  } catch {}\n}\n"],"names":[],"mappings":";;;AAAM,SAAU,KAAK,CAAI,KAAc;IACrC,IAAI,CAAC;QACH,OAAO,KAAK,EAAE,CAAC;IACjB,CAAC,CAAC,OAAA,IAAM,CAAC,CAAC;AACZ,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"file":"global.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/globals/global.ts"],"sourcesContent":["import { maybe } from \"./maybe.js\";\n\ndeclare global {\n  const __DEV__: boolean; // will be removed in `dist` by the `postprocessDist` script\n  interface Window {\n    __DEV__?: boolean;\n  }\n}\n\nexport default (maybe(() => globalThis) ||\n  maybe(() => window) ||\n  maybe(() => self) ||\n  maybe(() => global) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function () {\n    return maybe.constructor(\"return this\")();\n  })) as typeof globalThis & Window;\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;;uCASnB,4KAAA,AAAK,EAAC;IAAM,OAAA,UAAU;AAAV,CAAU,CAAC,wKACrC,QAAA,AAAK,EAAC;IAAM,OAAA,MAAM;AAAN,CAAM,CAAC,wKACnB,QAAA,AAAK,EAAC;IAAM,OAAA,IAAI;AAAJ,CAAI,CAAC,wKACjB,QAAA,AAAK,EAAC;IAAM,OAAA,MAAM;AAAN,CAAM,CAAC,IAAA,6EAAA;IACnB,yEAAA,IAA6E;IAC7E,sEAAA,OAA6E;IAC7E,uEAAA,GAA0E;IAC1E,yEAAA,EAA2E;IAC3E,0DAAA,mBAA6E;4KAC7E,EAAA,4DAA8D;IAC9D,KAAK,CAAC,CAAA,+JAAA,CAAA,QAAA,CAAA,WAAA,CAAA;QACJ,OAAO,KAAK,CAAC,WAAW,CAAC,aAAa,CAAC,EAAE,CAAC;KAC5C,CAAC,CAAC,CAA+B,CAAC,0BAAA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"file":"version.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/version.ts"],"sourcesContent":["export const version = \"local\";\n"],"names":[],"mappings":";;;AAAO,IAAM,OAAO,GAAG,OAAO,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"file":"makeUniqueId.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/makeUniqueId.ts"],"sourcesContent":["const prefixCounts = new Map<string, number>();\n\n// These IDs won't be globally unique, but they will be unique within this\n// process, thanks to the counter, and unguessable thanks to the random suffix.\nexport function makeUniqueId(prefix: string) {\n  const count = prefixCounts.get(prefix) || 1;\n  prefixCounts.set(prefix, count + 1);\n  return `${prefix}:${count}:${Math.random().toString(36).slice(2)}`;\n}\n"],"names":[],"mappings":";;;AAAA,IAAM,YAAY,GAAG,IAAI,GAAG,EAAkB,CAAC;AAIzC,SAAU,YAAY,CAAC,MAAc;IACzC,IAAM,KAAK,GAAG,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5C,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IACpC,OAAO,GAAA,MAAA,CAAG,MAAM,EAAA,KAAA,MAAA,CAAI,KAAK,EAAA,KAAA,MAAA,CAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC;AACrE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"file":"stringifyForDisplay.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/stringifyForDisplay.ts"],"sourcesContent":["import { makeUniqueId } from \"./makeUniqueId.js\";\n\nexport function stringifyForDisplay(value: any, space = 0): string {\n  const undefId = makeUniqueId(\"stringifyForDisplay\");\n  return JSON.stringify(\n    value,\n    (key, value) => {\n      return value === void 0 ? undefId : value;\n    },\n    space\n  )\n    .split(JSON.stringify(undefId))\n    .join(\"<undefined>\");\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;;AAE3C,SAAU,mBAAmB,CAAC,KAAU,EAAE,KAAS;IAAT,IAAA,UAAA,KAAA,GAAA;QAAA,QAAA,CAAS;IAAA;IACvD,IAAM,OAAO,6KAAG,eAAA,AAAY,EAAC,qBAAqB,CAAC,CAAC;IACpD,OAAO,IAAI,CAAC,SAAS,CACnB,KAAK,EACL,SAAC,GAAG,EAAE,KAAK;QACT,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;IAC5C,CAAC,EACD,KAAK,CACN,CACE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAC9B,IAAI,CAAC,aAAa,CAAC,CAAC;AACzB,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"file":"invariantWrappers.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/globals/invariantWrappers.ts"],"sourcesContent":["import { invariant as originalInvariant, InvariantError } from \"ts-invariant\";\nimport { version } from \"../../version.js\";\nimport global from \"./global.js\";\nimport type { ErrorCodes } from \"../../invariantErrorCodes.js\";\nimport { stringifyForDisplay } from \"../common/stringifyForDisplay.js\";\n\nfunction wrap(fn: (msg?: string, ...args: any[]) => void) {\n  return function (message?: string | number, ...args: any[]) {\n    if (typeof message === \"number\") {\n      const arg0 = message;\n      message = getHandledErrorMsg(arg0);\n      if (!message) {\n        message = getFallbackErrorMsg(arg0, args);\n        args = [];\n      }\n    }\n    fn(...[message].concat(args));\n  };\n}\n\ntype LogFunction = {\n  /**\n   * Logs a `$level` message if the user used `ts-invariant`'s `setVerbosity` to set\n   * a verbosity level of `$level` or lower. (defaults to `\"log\"`).\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadDevMessages` to add the message strings to the bundle.\n   * The documentation will display the message without argument substitution.\n   * Instead, the arguments will be printed on the console after the link.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * String substitutions like %s, %o, %d or %f are supported.\n   */\n  (message?: any, ...optionalParams: unknown[]): void;\n};\n\ntype WrappedInvariant = {\n  /**\n   * Throws and InvariantError with the given message if the condition is false.\n   *\n   * `message` can only be a string, a concatenation of strings, or a ternary statement\n   * that results in a string. This will be enforced on build, where the message will\n   * be replaced with a message number.\n   *\n   * The user will either be presented with a link to the documentation for the message,\n   * or they can use the `loadErrorMessages` to add the message strings to the bundle.\n   * The documentation will display the message with the arguments substituted.\n   *\n   * String substitutions with %s are supported and will also return\n   * pretty-stringified objects.\n   * Excess `optionalParams` will be swallowed.\n   */\n  (\n    condition: any,\n    message?: string | number,\n    ...optionalParams: unknown[]\n  ): asserts condition;\n\n  debug: LogFunction;\n  log: LogFunction;\n  warn: LogFunction;\n  error: LogFunction;\n};\nconst invariant: WrappedInvariant = Object.assign(\n  function invariant(\n    condition: any,\n    message?: string | number,\n    ...args: unknown[]\n  ): asserts condition {\n    if (!condition) {\n      originalInvariant(\n        condition,\n        getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args)\n      );\n    }\n  },\n  {\n    debug: wrap(originalInvariant.debug),\n    log: wrap(originalInvariant.log),\n    warn: wrap(originalInvariant.warn),\n    error: wrap(originalInvariant.error),\n  }\n);\n\n/**\n * Returns an InvariantError.\n *\n * `message` can only be a string, a concatenation of strings, or a ternary statement\n * that results in a string. This will be enforced on build, where the message will\n * be replaced with a message number.\n * String substitutions with %s are supported and will also return\n * pretty-stringified objects.\n * Excess `optionalParams` will be swallowed.\n */\nfunction newInvariantError(\n  message?: string | number,\n  ...optionalParams: unknown[]\n) {\n  return new InvariantError(\n    getHandledErrorMsg(message, optionalParams) ||\n      getFallbackErrorMsg(message, optionalParams)\n  );\n}\n\nconst ApolloErrorMessageHandler = Symbol.for(\n  \"ApolloErrorMessageHandler_\" + version\n);\ndeclare global {\n  interface Window {\n    [ApolloErrorMessageHandler]?: {\n      (message: string | number, args: string[]): string | undefined;\n    } & ErrorCodes;\n  }\n}\n\nfunction stringify(arg: any) {\n  if (typeof arg == \"string\") {\n    return arg;\n  }\n\n  try {\n    return stringifyForDisplay(arg, 2).slice(0, 1000);\n  } catch {\n    return \"<non-serializable>\";\n  }\n}\n\nfunction getHandledErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return (\n    global[ApolloErrorMessageHandler] &&\n    global[ApolloErrorMessageHandler](message, messageArgs.map(stringify))\n  );\n}\n\nfunction getFallbackErrorMsg(\n  message?: string | number,\n  messageArgs: unknown[] = []\n) {\n  if (!message) return;\n  return `An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#${encodeURIComponent(\n    JSON.stringify({\n      version,\n      message,\n      args: messageArgs.map(stringify),\n    })\n  )}`;\n}\n\nexport {\n  invariant,\n  InvariantError,\n  newInvariantError,\n  ApolloErrorMessageHandler,\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/globals/index.ts"],"sourcesContent":["import {\n  invariant,\n  newInvariantError,\n  InvariantError,\n} from \"./invariantWrappers.js\";\n\nexport { maybe } from \"./maybe.js\";\nexport { default as global } from \"./global.js\";\nexport { invariant, newInvariantError, InvariantError };\n\n/**\n * @deprecated we do not use this internally anymore,\n * it is just exported for backwards compatibility\n */\n// this file is extempt from automatic `__DEV__` replacement\n// so we have to write it out here\n// @ts-ignore\nexport const DEV = globalThis.__DEV__ !== false;\nexport { DEV as __DEV__ };\n"],"names":[],"mappings":";;;;AAAA,OAAO,EACL,SAAS,EACT,iBAAiB,EACjB,cAAc,GACf,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,OAAO,IAAI,MAAM,EAAE,MAAM,aAAa,CAAC;;;;;AAUzC,IAAM,GAAG,GAAG,UAAU,CAAC,OAAO,KAAK,KAAK,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"file":"canUse.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/canUse.ts"],"sourcesContent":["import { maybe } from \"../globals/index.js\";\n\nconst isReactNative = maybe(() => navigator.product) == \"ReactNative\";\n\nexport const canUseWeakMap =\n  typeof WeakMap === \"function\" &&\n  !(isReactNative && !(global as any).HermesInternal);\n\nexport const canUseWeakSet = typeof WeakSet === \"function\";\n\nexport const canUseSymbol =\n  typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\n\nexport const canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\n\nexport const canUseDOM =\n  typeof maybe(() => window.document.createElement) === \"function\";\n\nconst usingJSDOM: boolean =\n  // Following advice found in this comment from @domenic (maintainer of jsdom):\n  // https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n  //\n  // Since we control the version of Jest and jsdom used when running Apollo\n  // Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n  // at the end of the user agent string, I believe this case is all we need to\n  // check. Testing for \"Node.js\" was recommended for backwards compatibility\n  // with older version of jsdom, but we don't have that problem.\n  maybe(() => navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport const canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM;\n"],"names":[],"mappings":";;;;;;;;AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;;;AAE5C,IAAM,aAAa,uKAAG,QAAA,AAAK,EAAC;IAAM,OAAA,SAAS,CAAC,OAAO;AAAjB,CAAiB,CAAC,IAAI,aAAa,CAAC;AAE/D,IAAM,aAAa,GACxB,OAAO,OAAO,KAAK,UAAU,IAC7B,CAAC,CAAC,aAAa,IAAI,CAAE,MAAc,CAAC,cAAc,CAAC,CAAC;AAE/C,IAAM,aAAa,GAAG,OAAO,OAAO,KAAK,UAAU,CAAC;AAEpD,IAAM,YAAY,GACvB,OAAO,MAAM,KAAK,UAAU,IAAI,OAAO,MAAM,CAAC,GAAG,KAAK,UAAU,CAAC;AAE5D,IAAM,yBAAyB,GAAG,YAAY,IAAI,MAAM,CAAC,aAAa,CAAC;AAEvE,IAAM,SAAS,GACpB,2KAAO,QAAA,AAAK,EAAC;IAAM,OAAA,MAAM,CAAC,QAAQ,CAAC,aAAa;AAA7B,CAA6B,CAAC,KAAK,UAAU,CAAC;AAEnE,IAAM,UAAU,GACd,8EAA8E;AAC9E,oEAAoE;AACpE,EAAE;AACF,0EAA0E;AAC1E,6EAA6E;AAC7E,6EAA6E;AAC7E,2EAA2E;AAC3E,+DAA+D;oKAC/D,QAAA,AAAK,EAAC;IAAM,OAAA,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;AAAzC,CAAyC,CAAC,IAAI,KAAK,CAAC;AAQ3D,IAAM,kBAAkB,GAAG,CAAC,SAAS,IAAI,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"file":"useSyncExternalStore.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/react/hooks/useSyncExternalStore.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\n\nimport { canUseLayoutEffect } from \"../../utilities/index.js\";\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType =\n  realHook ||\n  ((subscribe, getSnapshot, getServerSnapshot) => {\n    // Read the current snapshot from the store on every render. Again, this\n    // breaks the rules of React, and only works here because of specific\n    // implementation details, most importantly that updates are\n    // always synchronous.\n    const value = getSnapshot();\n    if (\n      // DEVIATION: Using __DEV__\n      __DEV__ &&\n      !didWarnUncachedGetSnapshot &&\n      // DEVIATION: Not using Object.is because we know our snapshots will never\n      // be exotic primitive values like NaN, which is !== itself.\n      value !== getSnapshot()\n    ) {\n      didWarnUncachedGetSnapshot = true;\n      // DEVIATION: Using invariant.error instead of console.error directly.\n      invariant.error(\n        \"The result of getSnapshot should be cached to avoid an infinite loop\"\n      );\n    }\n\n    // Because updates are synchronous, we don't queue them. Instead we force a\n    // re-render whenever the subscribed state changes by updating an some\n    // arbitrary useState hook. Then, during render, we call getSnapshot to read\n    // the current value.\n    //\n    // Because we don't actually use the state returned by the useState hook, we\n    // can save a bit of memory by storing other stuff in that slot.\n    //\n    // To implement the early bailout, we need to track some things on a mutable\n    // object. Usually, we would put that in a useRef hook, but we can stash it in\n    // our useState hook instead.\n    //\n    // To force a re-render, we call forceUpdate({inst}). That works because the\n    // new object always fails an equality check.\n    const [{ inst }, forceUpdate] = React.useState({\n      inst: { value, getSnapshot },\n    });\n\n    // Track the latest getSnapshot function with a ref. This needs to be updated\n    // in the layout phase so we can access it during the tearing check that\n    // happens on subscribe.\n    if (canUseLayoutEffect) {\n      // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n      // which may seem like a conditional hook, but this code ends up behaving\n      // unconditionally (one way or the other) because canUseLayoutEffect is\n      // constant.\n      React.useLayoutEffect(() => {\n        Object.assign(inst, { value, getSnapshot });\n        // Whenever getSnapshot or subscribe changes, we need to check in the\n        // commit phase if there was an interleaved mutation. In concurrent mode\n        // this can happen all the time, but even in synchronous mode, an earlier\n        // effect may have mutated the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n        // React Hook React.useLayoutEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [subscribe, value, getSnapshot]);\n    } else {\n      Object.assign(inst, { value, getSnapshot });\n    }\n\n    React.useEffect(() => {\n      // Check for changes right before subscribing. Subsequent changes will be\n      // detected in the subscription handler.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n\n      // Subscribe to the store and return a clean-up function.\n      return subscribe(function handleStoreChange() {\n        // TODO: Because there is no cross-renderer API for batching updates, it's\n        // up to the consumer of this library to wrap their subscription event\n        // with unstable_batchedUpdates. Should we try to detect when this isn't\n        // the case and print a warning in development?\n\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceUpdate({ inst });\n        }\n      });\n      // React Hook React.useEffect has a missing dependency: 'inst'. Either include it or remove the dependency array.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [subscribe]);\n\n    return value;\n  });\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,kCAAkC,CAAC;AAC7D,OAAO,KAAK,KAAK,MAAM,SAAS,CAAC;AAEjC,OAAO,EAAE,kBAAkB,EAAE,MAAM,0BAA0B,CAAC;;;;AAE9D,IAAI,0BAA0B,GAAG,KAAK,CAAC;AASvC,sEAAsE;AACtE,8EAA8E;AAC9E,6DAA6D;AAC7D,IAAM,OAAO,GAAG,sBAA4C,CAAC;AAC7D,IAAM,QAAQ,GAAG,4HAAK,CAAC,OAAO,CAAmC,CAAC;AAM3D,IAAM,oBAAoB,GAC/B,QAAQ,IACP,SAAC,SAAS,EAAE,WAAW,EAAE,iBAAiB;IACzC,wEAAwE;IACxE,qEAAqE;IACrE,4DAA4D;IAC5D,sBAAsB;IACtB,IAAM,KAAK,GAAG,WAAW,EAAE,CAAC;IAC5B,IACE,2BAA2B;IAC3B,OAAO,IAAA,OAAA,KAAA,SACP,CAAC,0BAA0B,IAC3B,0EAA0E;IAC1E,4DAA4D;IAC5D,KAAK,KAAK,WAAW,EAAE,EACvB,CAAC;QACD,0BAA0B,GAAG,IAAI,CAAC;QAClC,sEAAsE;QACtE,SAAS,CAAC,CAAA,IAAK,CACb,EAAA,KAAA,SAAA,2LAAA,CAAA,YAAA,CAAA,KAAA,CAAA,sCAAsE,CACvE,CAAC;IACJ,CAAC;IAED,2EAA2E;IAC3E,sEAAsE;IACtE,4EAA4E;IAC5E,qBAAqB;IACrB,EAAE;IACF,4EAA4E;IAC5E,gEAAgE;IAChE,EAAE;IACF,4EAA4E;IAC5E,8EAA8E;IAC9E,6BAA6B;IAC7B,EAAE;IACF,4EAA4E;IAC5E,6CAA6C;IACvC,IAAA,KAA0B,KAAK,wHAAC,QAAQ,CAAC;QAC7C,IAAI,EAAE;YAAE,KAAK,EAAA,KAAA;YAAE,WAAW,EAAA,WAAA;QAAA,CAAE;KAC7B,CAAC,EAFO,IAAI,GAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAI,WAAW,GAAA,EAAA,CAAA,EAE1B,CAAC;IAEH,6EAA6E;IAC7E,wEAAwE;IACxE,wBAAwB;IACxB,oKAAI,qBAAkB,EAAE,CAAC;QACvB,wEAAwE;QACxE,yEAAyE;QACzE,uEAAuE;QACvE,YAAY;QACZ,KAAK,wHAAC,eAAe,CAAC;YACpB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;gBAAE,KAAK,EAAA,KAAA;gBAAE,WAAW,EAAA,WAAA;YAAA,CAAE,CAAC,CAAC;YAC5C,qEAAqE;YACrE,wEAAwE;YACxE,yEAAyE;YACzE,qCAAqC;YACrC,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;gBACjC,qBAAqB;gBACrB,WAAW,CAAC;oBAAE,IAAI,EAAA,IAAA;gBAAA,CAAE,CAAC,CAAC;YACxB,CAAC;QACD,uHAAuH;QACvH,uDAAuD;QACzD,CAAC,EAAE;YAAC,SAAS;YAAE,KAAK;YAAE,WAAW;SAAC,CAAC,CAAC;IACtC,CAAC,MAAM,CAAC;QACN,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YAAE,KAAK,EAAA,KAAA;YAAE,WAAW,EAAA,WAAA;QAAA,CAAE,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,wHAAC,SAAS,CAAC;QACd,yEAAyE;QACzE,wCAAwC;QACxC,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,qBAAqB;YACrB,WAAW,CAAC;gBAAE,IAAI,EAAA,IAAA;YAAA,CAAE,CAAC,CAAC;QACxB,CAAC;QAED,yDAAyD;QACzD,OAAO,SAAS,CAAC,SAAS,iBAAiB;YACzC,0EAA0E;YAC1E,sEAAsE;YACtE,wEAAwE;YACxE,+CAA+C;YAE/C,0EAA0E;YAC1E,uBAAuB;YACvB,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;gBACjC,qBAAqB;gBACrB,WAAW,CAAC;oBAAE,IAAI,EAAA,IAAA;gBAAA,CAAE,CAAC,CAAC;YACxB,CAAC;QACH,CAAC,CAAC,CAAC;IACH,iHAAiH;IACjH,uDAAuD;IACzD,CAAC,EAAE;QAAC,SAAS;KAAC,CAAC,CAAC;IAEhB,OAAO,KAAK,CAAC;AACf,CAAC,CAAC,CAAC;AAEL,SAAS,sBAAsB,CAAW,EAMzC;QALC,KAAK,GAAA,GAAA,KAAA,EACL,WAAW,GAAA,GAAA,WAAA;IAKX,IAAI,CAAC;QACH,OAAO,KAAK,KAAK,WAAW,EAAE,CAAC;IACjC,CAAC,CAAC,OAAA,IAAM,CAAC;QACP,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"file":"compact.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/compact.ts"],"sourcesContent":["import type { TupleToIntersection } from \"./mergeDeep.js\";\n\n/**\n * Merges the provided objects shallowly and removes\n * all properties with an `undefined` value\n */\nexport function compact<TArgs extends any[]>(\n  ...objects: TArgs\n): TupleToIntersection<TArgs> {\n  const result = Object.create(null);\n\n  objects.forEach((obj) => {\n    if (!obj) return;\n    Object.keys(obj).forEach((key) => {\n      const value = (obj as any)[key];\n      if (value !== void 0) {\n        result[key] = value;\n      }\n    });\n  });\n\n  return result;\n}\n"],"names":[],"mappings":"AAEA;;;GAGG;;;AACG,SAAU,OAAO;IACrB,IAAA,UAAA,EAAA,CAAiB;QAAjB,IAAA,KAAA,CAAiB,EAAjB,KAAA,UAAA,MAAiB,EAAjB,IAAiB,CAAA;QAAjB,OAAA,CAAA,GAAA,GAAA,SAAA,CAAA,GAAA,CAAiB;;IAEjB,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEnC,OAAO,CAAC,OAAO,CAAC,SAAC,GAAG;QAClB,IAAI,CAAC,GAAG,EAAE,OAAO;QACjB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,SAAC,GAAG;YAC3B,IAAM,KAAK,GAAI,GAAW,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE,CAAC;gBACrB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YACtB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"file":"mergeOptions.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/mergeOptions.ts"],"sourcesContent":["import type {\n  QueryOptions,\n  WatchQueryOptions,\n  MutationOptions,\n  OperationVariables,\n} from \"../../core/index.js\";\n\nimport { compact } from \"./compact.js\";\n\ntype OptionsUnion<TData, TVariables extends OperationVariables, TContext> =\n  | WatchQueryOptions<TVariables, TData>\n  | QueryOptions<TVariables, TData>\n  | MutationOptions<TData, TVariables, TContext, any>;\n\nexport function mergeOptions<\n  TDefaultOptions extends Partial<OptionsUnion<any, any, any>>,\n  TOptions extends TDefaultOptions,\n>(\n  defaults: TDefaultOptions | Partial<TDefaultOptions> | undefined,\n  options: TOptions | Partial<TOptions>\n): TOptions & TDefaultOptions {\n  return compact(\n    defaults,\n    options,\n    options.variables && {\n      variables: compact({\n        ...(defaults && defaults.variables),\n        ...options.variables,\n      }),\n    }\n  );\n}\n"],"names":[],"mappings":";;;;AAOA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;;;AAOjC,SAAU,YAAY,CAI1B,QAAgE,EAChE,OAAqC;IAErC,4KAAO,UAAA,AAAO,EACZ,QAAQ,EACR,OAAO,EACP,OAAO,CAAC,SAAS,IAAI;QACnB,SAAS,uKAAE,UAAA,AAAO,EAAA,CAAA,GAAA,kIAAA,CAAA,WAAA,EAAA,CAAA,GAAA,kIAAA,CAAA,WAAA,EAAA,CAAA,GACb,AAAC,QAAQ,IAAI,QAAQ,CAAC,SAAS,CAAC,EAChC,OAAO,CAAC,SAAS,EACpB;KACH,CACF,CAAC;AACJ,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"file":"ApolloContext.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/react/context/ApolloContext.ts"],"sourcesContent":["import * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport type { RenderPromises } from \"../ssr/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nexport interface ApolloContextValue {\n  client?: ApolloClient<object>;\n  renderPromises?: RenderPromises;\n}\n\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nconst contextKey =\n  canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\n\nexport function getApolloContext(): ReactTypes.Context<ApolloContextValue> {\n  invariant(\n    \"createContext\" in React,\n    \"Invoking `getApolloContext` in an environment where `React.createContext` is not available.\\n\" +\n      \"The Apollo Client functionality you are trying to use is only available in React Client Components.\\n\" +\n      'Please make sure to add \"use client\" at the top of your file.\\n' +\n      // TODO: change to React documentation once React documentation contains information about Client Components\n      \"For more information, see https://nextjs.org/docs/getting-started/react-essentials#client-components\"\n  );\n\n  let context = (React.createContext as any)[\n    contextKey\n  ] as React.Context<ApolloContextValue>;\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: (context = React.createContext<ApolloContextValue>({})),\n      enumerable: false,\n      writable: false,\n      configurable: true,\n    });\n    context.displayName = \"ApolloContext\";\n  }\n  return context;\n}\n\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport const resetApolloContext = getApolloContext;\n"],"names":[],"mappings":";;;;AAAA,OAAO,KAAK,KAAK,MAAM,SAAS,CAAC;AAGjC,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;;AAExD,OAAO,EAAE,SAAS,EAAE,MAAM,kCAAkC,CAAC;;;;AAO7D,wEAAwE;AACxE,0EAA0E;AAC1E,wEAAwE;AACxE,4EAA4E;AAC5E,IAAM,UAAU,mKACd,eAAY,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC;AAEnE,SAAU,gBAAgB;oMAC9B,YAAA,AAAS,EACP,eAAe,IAAI,KAAK,yHACxB,+FAA+F;QAC7F,UAAA,6HAAA,aAAA,CAAA,WAAA,8DAAuG;QACvG,CAAA,SAAA,uDAAiE;QACjE,OAAA,cAAA,CAAA,6HAAA,aAAA,EAAA,YAAA,qDAA4G;YAC5G,OAAA,UAAA,6HAAA,aAAA,CAAA,CAAA,2DAAsG,CACzG,CAAC;YAEE,GAAO,GAAI,KAAK,CAAC,aAAqB,CACxC,UAAU,CAC0B,CAAC;YAClC,IAAO,EAAE,CAAC,GAAA;YACb,EAAM,CAAC,WAAA,GAAc,CAAC,KAAK,CAAC,aAAa,EAAE,UAAU,EAAE;YACrD,KAAK,EAAE,CAAC,OAAO,GAAG,KAAK,CAAC,aAAa,CAAqB,EAAE,CAAC,CAAC;YAC9D,IAAA,MAAU,EAAE,GAAA,EAAK,CAAA;YACjB,QAAQ,EAAE,KAAK;YACf,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 489, "column": 0}, "map": {"version":3,"file":"objects.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/objects.ts"],"sourcesContent":["export function isNonNullObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === \"object\";\n}\n\nexport function isPlainObject(obj: any): obj is Record<string | number, any> {\n  return (\n    obj !== null &&\n    typeof obj === \"object\" &&\n    (Object.getPrototypeOf(obj) === Object.prototype ||\n      Object.getPrototypeOf(obj) === null)\n  );\n}\n"],"names":[],"mappings":";;;;AAAM,SAAU,eAAe,CAAC,GAAQ;IACtC,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAC;AACjD,CAAC;AAEK,SAAU,aAAa,CAAC,GAAQ;IACpC,OAAO,AACL,GAAG,KAAK,IAAI,IACZ,OAAO,GAAG,KAAK,QAAQ,IACvB,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,SAAS,IAC9C,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,CACvC,CAAC;AACJ,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 505, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/errors/index.ts"],"sourcesContent":["import \"../utilities/globals/index.js\";\n\nimport type {\n  GraphQLError,\n  GraphQLErrorExtensions,\n  GraphQLFormattedError,\n} from \"graphql\";\n\nimport { isNonNullObject } from \"../utilities/index.js\";\nimport type { ServerParseError } from \"../link/http/index.js\";\nimport type { ServerError } from \"../link/utils/index.js\";\nimport type { FetchResult } from \"../link/core/index.js\";\n\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport const PROTOCOL_ERRORS_SYMBOL: unique symbol = Symbol();\n\ntype FetchResultWithSymbolExtensions<T> = FetchResult<T> & {\n  extensions: Record<string | symbol, any>;\n};\n\nexport interface ApolloErrorOptions {\n  graphQLErrors?: ReadonlyArray<GraphQLFormattedError>;\n  protocolErrors?: ReadonlyArray<GraphQLFormattedError>;\n  clientErrors?: ReadonlyArray<Error>;\n  networkError?: Error | ServerParseError | ServerError | null;\n  errorMessage?: string;\n  extraInfo?: any;\n}\n\nexport function graphQLResultHasProtocolErrors<T>(\n  result: FetchResult<T>\n): result is FetchResultWithSymbolExtensions<T> {\n  if (result.extensions) {\n    return Array.isArray(\n      (result as FetchResultWithSymbolExtensions<T>).extensions[\n        PROTOCOL_ERRORS_SYMBOL\n      ]\n    );\n  }\n  return false;\n}\n\nexport function isApolloError(err: Error): err is ApolloError {\n  return err.hasOwnProperty(\"graphQLErrors\");\n}\n\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nconst generateErrorMessage = (err: ApolloError) => {\n  const errors = [\n    ...err.graphQLErrors,\n    ...err.clientErrors,\n    ...err.protocolErrors,\n  ];\n  if (err.networkError) errors.push(err.networkError);\n  return (\n    errors\n      // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n      .map(\n        (err) =>\n          (isNonNullObject(err) && err.message) || \"Error message not found.\"\n      )\n      .join(\"\\n\")\n  );\n};\n\n/**\n * @deprecated This type is deprecated and will be removed in the next major version of Apollo Client.\n * It mistakenly referenced `GraqhQLError` instead of `GraphQLFormattedError`.\n *\n * Use `ReadonlyArray<GraphQLFormattedError>` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-restricted-types\nexport type GraphQLErrors = ReadonlyArray<GraphQLError>;\n\nexport type NetworkError = Error | ServerParseError | ServerError | null;\n\nexport class ApolloError extends Error {\n  public name: string;\n  public message: string;\n  public graphQLErrors: ReadonlyArray<GraphQLFormattedError>;\n  public protocolErrors: ReadonlyArray<GraphQLFormattedError>;\n  public clientErrors: ReadonlyArray<Error>;\n  public networkError: Error | ServerParseError | ServerError | null;\n  /**\n   * Indicates the specific original cause of the error.\n   *\n   * This field contains the first available `networkError`, `graphQLError`, `protocolError`, `clientError`, or `null` if none are available.\n   */\n  public cause:\n    | ({\n        readonly message: string;\n        extensions?:\n          | GraphQLErrorExtensions[]\n          | GraphQLFormattedError[\"extensions\"];\n      } & Omit<Partial<Error> & Partial<GraphQLFormattedError>, \"extensions\">)\n    | null;\n\n  // An object that can be used to provide some additional information\n  // about an error, e.g. specifying the type of error this is. Used\n  // internally within Apollo Client.\n  public extraInfo: any;\n\n  // Constructs an instance of ApolloError given serialized GraphQL errors,\n  // client errors, protocol errors or network errors.\n  // Note that one of these has to be a valid\n  // value or the constructed error will be meaningless.\n  constructor({\n    graphQLErrors,\n    protocolErrors,\n    clientErrors,\n    networkError,\n    errorMessage,\n    extraInfo,\n  }: ApolloErrorOptions) {\n    super(errorMessage);\n    this.name = \"ApolloError\";\n    this.graphQLErrors = graphQLErrors || [];\n    this.protocolErrors = protocolErrors || [];\n    this.clientErrors = clientErrors || [];\n    this.networkError = networkError || null;\n    this.message = errorMessage || generateErrorMessage(this);\n    this.extraInfo = extraInfo;\n    this.cause =\n      [\n        networkError,\n        ...(graphQLErrors || []),\n        ...(protocolErrors || []),\n        ...(clientErrors || []),\n      ].find((e) => !!e) || null;\n\n    // We're not using `Object.setPrototypeOf` here as it isn't fully\n    // supported on Android (see issue #3236).\n    (this as any).__proto__ = ApolloError.prototype;\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 575, "column": 0}, "map": {"version":3,"file":"networkStatus.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/core/networkStatus.ts"],"sourcesContent":["/**\n * The current status of a query’s execution in our system.\n */\nexport enum NetworkStatus {\n  /**\n   * The query has never been run before and the query is now currently running. A query will still\n   * have this network status even if a partial data result was returned from the cache, but a\n   * query was dispatched anyway.\n   */\n  loading = 1,\n\n  /**\n   * If `setVariables` was called and a query was fired because of that then the network status\n   * will be `setVariables` until the result of that query comes back.\n   */\n  setVariables = 2,\n\n  /**\n   * Indicates that `fetchMore` was called on this query and that the query created is currently in\n   * flight.\n   */\n  fetchMore = 3,\n\n  /**\n   * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n   * and the refetch request is currently in flight.\n   */\n  refetch = 4,\n\n  /**\n   * Indicates that a polling query is currently in flight. So for example if you are polling a\n   * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n   * a poll request has been sent but not resolved.\n   */\n  poll = 6,\n\n  /**\n   * No request is in flight for this query, and no errors happened. Everything is OK.\n   */\n  ready = 7,\n\n  /**\n   * No request is in flight for this query, but one or more errors were detected.\n   */\n  error = 8,\n}\n\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(\n  networkStatus?: NetworkStatus\n): boolean {\n  return networkStatus ? networkStatus < 7 : false;\n}\n\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */\nexport function isNetworkRequestSettled(\n  networkStatus?: NetworkStatus\n): boolean {\n  return networkStatus === 7 || networkStatus === 8;\n}\n"],"names":[],"mappings":"AAAA;;GAEG;;;;;AACH,IAAY,aA0CX;AA1CD,CAAA,SAAY,aAAa;IACvB;;;;OAIG,CACH,aAAA,CAAA,aAAA,CAAA,UAAA,GAAA,EAAA,GAAA,SAAW,CAAA;IAEX;;;OAGG,CACH,aAAA,CAAA,aAAA,CAAA,eAAA,GAAA,EAAA,GAAA,cAAgB,CAAA;IAEhB;;;OAGG,CACH,aAAA,CAAA,aAAA,CAAA,YAAA,GAAA,EAAA,GAAA,WAAa,CAAA;IAEb;;;OAGG,CACH,aAAA,CAAA,aAAA,CAAA,UAAA,GAAA,EAAA,GAAA,SAAW,CAAA;IAEX;;;;OAIG,CACH,aAAA,CAAA,aAAA,CAAA,OAAA,GAAA,EAAA,GAAA,MAAQ,CAAA;IAER;;OAEG,CACH,aAAA,CAAA,aAAA,CAAA,QAAA,GAAA,EAAA,GAAA,OAAS,CAAA;IAET;;OAEG,CACH,aAAA,CAAA,aAAA,CAAA,QAAA,GAAA,EAAA,GAAA,OAAS,CAAA;AACX,CAAC,EA1CW,aAAa,IAAA,CAAb,aAAa,GAAA,CAAA,CAAA,GA0CxB;AAMK,SAAU,wBAAwB,CACtC,aAA6B;IAE7B,OAAO,aAAa,CAAC,CAAC,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AACnD,CAAC;AAMK,SAAU,uBAAuB,CACrC,aAA6B;IAE7B,OAAO,aAAa,KAAK,CAAC,IAAI,aAAa,KAAK,CAAC,CAAC;AACpD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"file":"cloneDeep.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/cloneDeep.ts"],"sourcesContent":["const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value);\n}\n\nfunction cloneDeepHelper<T>(val: T, seen?: Map<any, any>): T {\n  switch (toString.call(val)) {\n    case \"[object Array]\": {\n      seen = seen || new Map();\n      if (seen.has(val)) return seen.get(val);\n      const copy: T & any[] = (val as any).slice(0);\n      seen.set(val, copy);\n      copy.forEach(function (child, i) {\n        copy[i] = cloneDeepHelper(child, seen);\n      });\n      return copy;\n    }\n\n    case \"[object Object]\": {\n      seen = seen || new Map();\n      if (seen.has(val)) return seen.get(val);\n      // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n      // possible in all JS environments, so we will assume they exist/work.\n      const copy = Object.create(Object.getPrototypeOf(val));\n      seen.set(val, copy);\n      Object.keys(val as T & Record<string, any>).forEach((key) => {\n        copy[key] = cloneDeepHelper((val as any)[key], seen);\n      });\n      return copy;\n    }\n\n    default:\n      return val;\n  }\n}\n"],"names":[],"mappings":";;;AAAQ,IAAA,QAAQ,GAAK,MAAM,CAAC,SAAS,CAAA,QAArB,CAAsB;AAKhC,SAAU,SAAS,CAAI,KAAQ;IACnC,OAAO,eAAe,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC;AAED,SAAS,eAAe,CAAI,GAAM,EAAE,IAAoB;IACtD,OAAQ,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QAC3B,KAAK,gBAAgB,CAAC;YAAC,CAAC;gBACtB,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;gBACzB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACxC,IAAM,MAAI,GAAe,GAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAI,CAAC,CAAC;gBACpB,MAAI,CAAC,OAAO,CAAC,SAAU,KAAK,EAAE,CAAC;oBAC7B,MAAI,CAAC,CAAC,CAAC,GAAG,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;gBACH,OAAO,MAAI,CAAC;YACd,CAAC;QAED,KAAK,iBAAiB,CAAC;YAAC,CAAC;gBACvB,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;gBACzB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACxC,yEAAyE;gBACzE,sEAAsE;gBACtE,IAAM,MAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;gBACvD,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,MAAI,CAAC,CAAC;gBACpB,MAAM,CAAC,IAAI,CAAC,GAA8B,CAAC,CAAC,OAAO,CAAC,SAAC,GAAG;oBACtD,MAAI,CAAC,GAAG,CAAC,GAAG,eAAe,CAAE,GAAW,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;gBACvD,CAAC,CAAC,CAAC;gBACH,OAAO,MAAI,CAAC;YACd,CAAC;QAED;YACE,OAAO,GAAG,CAAC;IACf,CAAC;AACH,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"file":"fragments.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/graphql/fragments.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../globals/index.js\";\n\nimport { BREAK, visit } from \"graphql\";\nimport type {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode,\n} from \"graphql\";\n\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype Kind = any;\ntype OperationTypeNode = any;\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach((definition) => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === \"OperationDefinition\") {\n      throw newInvariantError(\n        `Found a %s operation%s. ` +\n          \"No operations are allowed when using a fragment as a query. Only fragments are allowed.\",\n        definition.operation,\n        definition.name ? ` named '${definition.name.value}'` : \"\"\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === \"FragmentDefinition\") {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === \"undefined\") {\n    invariant(\n      fragments.length === 1,\n      `Found %s fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n      fragments.length\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: \"OperationDefinition\" as Kind,\n        // OperationTypeNode is an enum\n        operation: \"query\" as OperationTypeNode,\n        selectionSet: {\n          kind: \"SelectionSet\" as Kind,\n          selections: [\n            {\n              kind: \"FragmentSpread\" as Kind,\n              name: {\n                kind: \"Name\" as Kind,\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\nexport type FragmentMapFunction = (\n  fragmentName: string\n) => FragmentDefinitionNode | null;\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = []\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach((fragment) => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap | FragmentMapFunction\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case \"InlineFragment\":\n      return selection;\n    case \"FragmentSpread\": {\n      const fragmentName = selection.name.value;\n      if (typeof fragmentMap === \"function\") {\n        return fragmentMap(fragmentName);\n      }\n      const fragment = fragmentMap && fragmentMap[fragmentName];\n      invariant(fragment, `No fragment named %s`, fragmentName);\n      return fragment || null;\n    }\n    default:\n      return null;\n  }\n}\n\nexport function isFullyUnmaskedOperation(document: DocumentNode) {\n  let isUnmasked = true;\n\n  visit(document, {\n    FragmentSpread: (node) => {\n      isUnmasked =\n        !!node.directives &&\n        node.directives.some((directive) => directive.name.value === \"unmask\");\n\n      if (!isUnmasked) {\n        return BREAK;\n      }\n    },\n  });\n\n  return isUnmasked;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 778, "column": 0}, "map": {"version":3,"file":"caches.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/caching/caches.ts"],"sourcesContent":["import { WeakCache, StrongCache } from \"@wry/caches\";\n\ninterface CleanableCache {\n  size: number;\n  max?: number;\n  clean: () => void;\n}\nconst scheduledCleanup = new WeakSet<CleanableCache>();\nfunction schedule(cache: CleanableCache) {\n  if (cache.size <= (cache.max || -1)) {\n    return;\n  }\n  if (!scheduledCleanup.has(cache)) {\n    scheduledCleanup.add(cache);\n    setTimeout(() => {\n      cache.clean();\n      scheduledCleanup.delete(cache);\n    }, 100);\n  }\n}\n/**\n * @internal\n * A version of WeakCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of WeakCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `WeakCache`.\n */\nexport const AutoCleanedWeakCache = function (\n  max?: number | undefined,\n  dispose?: ((value: any, key: any) => void) | undefined\n) {\n  /*\n  Some builds of `WeakCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  const cache = new WeakCache(max, dispose);\n  cache.set = function (key: any, value: any) {\n    const ret = WeakCache.prototype.set.call(this, key, value);\n    schedule(this as any as CleanableCache);\n    return ret;\n  };\n  return cache;\n} as any as typeof WeakCache;\n/**\n * @internal\n */\nexport type AutoCleanedWeakCache<K extends object, V> = WeakCache<K, V>;\n\n/**\n * @internal\n * A version of StrongCache that will auto-schedule a cleanup of the cache when\n * a new item is added and the cache reached maximum size.\n * Throttled to once per 100ms.\n *\n * @privateRemarks\n * Should be used throughout the rest of the codebase instead of StrongCache,\n * with the notable exception of usage in `wrap` from `optimism` - that one\n * already handles cleanup and should remain a `StrongCache`.\n */\nexport const AutoCleanedStrongCache = function (\n  max?: number | undefined,\n  dispose?: ((value: any, key: any) => void) | undefined\n) {\n  /*\n  Some builds of `StrongCache` are function prototypes, some are classes.\n  This library still builds with an ES5 target, so we can't extend the\n  real classes.\n  Instead, we have to use this workaround until we switch to a newer build\n  target.\n  */\n  const cache = new StrongCache(max, dispose);\n  cache.set = function (key: any, value: any) {\n    const ret = StrongCache.prototype.set.call(this, key, value);\n    schedule(this as any as CleanableCache);\n    return ret;\n  };\n  return cache;\n} as any as typeof StrongCache;\n/**\n * @internal\n */\nexport type AutoCleanedStrongCache<K, V> = StrongCache<K, V>;\n"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;;AAOrD,IAAM,gBAAgB,GAAG,IAAI,OAAO,EAAkB,CAAC;AACvD,SAAS,QAAQ,CAAC,KAAqB;IACrC,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACpC,OAAO;IACT,CAAC;IACD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;QACjC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC5B,UAAU,CAAC;YACT,KAAK,CAAC,KAAK,EAAE,CAAC;YACd,gBAAgB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;AACH,CAAC;AAYM,IAAM,oBAAoB,GAAG,SAClC,GAAwB,EACxB,OAAsD;IAEtD;;;;;;MAME,CACF,IAAM,KAAK,GAAG,+IAAI,YAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC1C,KAAK,CAAC,GAAG,GAAG,SAAU,GAAQ,EAAE,KAAU;QACxC,IAAM,GAAG,8IAAG,YAAS,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAC3D,QAAQ,CAAC,IAA6B,CAAC,CAAC;QACxC,OAAO,GAAG,CAAC;IACb,CAAC,CAAC;IACF,OAAO,KAAK,CAAC;AACf,CAA4B,CAAC;AAiBtB,IAAM,sBAAsB,GAAG,SACpC,GAAwB,EACxB,OAAsD;IAEtD;;;;;;MAME,CACF,IAAM,KAAK,GAAG,iJAAI,cAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC5C,KAAK,CAAC,GAAG,GAAG,SAAU,GAAQ,EAAE,KAAU;QACxC,IAAM,GAAG,gJAAG,cAAW,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAC7D,QAAQ,CAAC,IAA6B,CAAC,CAAC;QACxC,OAAO,GAAG,CAAC;IACb,CAAC,CAAC;IACF,OAAO,KAAK,CAAC;AACf,CAA8B,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 844, "column": 0}, "map": {"version":3,"file":"sizes.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/caching/sizes.ts"],"sourcesContent":["import { global } from \"../globals/index.js\";\n\ndeclare global {\n  interface Window {\n    [cacheSizeSymbol]?: Partial<CacheSizes>;\n  }\n}\n\n/**\n * The cache sizes used by various Apollo Client caches.\n *\n * @remarks\n * All configurable caches hold memoized values. If an item is\n * cache-collected, it incurs only a small performance impact and\n * doesn't cause data loss. A smaller cache size might save you memory.\n *\n * You should choose cache sizes appropriate for storing a reasonable\n * number of values rather than every value. To prevent too much recalculation,\n * choose cache sizes that are at least large enough to hold memoized values for\n * all hooks/queries on the screen at any given time.\n */\n/*\n * We assume a \"base value\" of 1000 here, which is already very generous.\n * In most applications, it will be very unlikely that 1000 different queries\n * are on screen at the same time.\n */\nexport interface CacheSizes {\n  /**\n   * Cache size for the [`print`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/print.ts) function.\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * This method is called to transform a GraphQL query AST parsed by `gql`\n   * back into a GraphQL string.\n   *\n   * @privateRemarks\n   * This method is called from the `QueryManager` and various `ApolloLink`s,\n   * always with the \"serverQuery\", so the server-facing part of a transformed\n   * `DocumentNode`.\n   */\n  print: number;\n  /**\n   * Cache size for the [`parser`](https://github.com/apollographql/apollo-client/blob/main/src/react/parser/index.ts) function.\n   *\n   * It is called with user-provided `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * This method is called by HOCs and hooks.\n   *\n   * @privateRemarks\n   * This function is used directly in HOCs, and nowadays mainly accessed by\n   * calling `verifyDocumentType` from various hooks.\n   * It is called with a user-provided DocumentNode.\n   */\n  parser: number;\n  /**\n   * Cache size for the cache of [`DocumentTransform`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/DocumentTransform.ts)\n   * instances with the `cache` option set to `true`.\n   *\n   * Can be called with user-defined or already-transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * The cache size here should be chosen with other `DocumentTransform`s in mind.\n   * For example, if there was a `DocumentTransform` that would take `x` `DocumentNode`s,\n   * and returned a differently-transformed `DocumentNode` depending if the app is\n   * online or offline, then we assume that the cache returns `2*x` documents.\n   * If that were concatenated with another `DocumentTransform` that would\n   * also duplicate the cache size, you'd need to account for `4*x` documents\n   * returned by the second transform.\n   *\n   * Due to an implementation detail of Apollo Client, if you use custom document\n   * transforms you should always add `n` (the \"base\" number of user-provided\n   * Documents) to the resulting cache size.\n   *\n   * If we assume that the user-provided transforms receive `n` documents and\n   * return `n` documents, the cache size should be `2*n`.\n   *\n   * If we assume that the chain of user-provided transforms receive `n` documents and\n   * return `4*n` documents, the cache size should be `5*n`.\n   *\n   * This size should also then be used in every other cache that mentions that\n   * it operates on a \"transformed\" `DocumentNode`.\n   *\n   * @privateRemarks\n   * Cache size for the `performWork` method of each [`DocumentTransform`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/graphql/DocumentTransform.ts).\n   *\n   * No user-provided DocumentNode will actually be \"the last one\", as we run the\n   * `defaultDocumentTransform` before *and* after the user-provided transforms.\n   * For that reason, we need the extra `n` here - `n` for \"before transformation\"\n   * plus the actual maximum cache size of the user-provided transform chain.\n   *\n   * This method is called from `transformDocument`, which is called from\n   * `QueryManager` with a user-provided DocumentNode.\n   * It is also called with already-transformed DocumentNodes, assuming the\n   * user provided additional transforms.\n   *\n   */\n  \"documentTransform.cache\": number;\n  /**\n   * A cache inside of [`QueryManager`](https://github.com/apollographql/apollo-client/blob/main/src/core/QueryManager.ts).\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   * Cache size for the `transformCache` used in the `getDocumentInfo` method of `QueryManager`.\n   * Called throughout the `QueryManager` with transformed DocumentNodes.\n   */\n  \"queryManager.getDocumentInfo\": number;\n  /**\n   * A cache inside of [`PersistedQueryLink`](https://github.com/apollographql/apollo-client/blob/main/src/link/persisted-queries/index.ts).\n   *\n   * It is called with transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @remarks\n   * This cache is used to cache the hashes of persisted queries.\n   *\n   * @privateRemarks\n   * Cache size for the `hashesByQuery` cache in the `PersistedQueryLink`.\n   */\n  \"PersistedQueryLink.persistedQueryHashes\": number;\n  /**\n   * Cache used by [`canonicalStringify`](https://github.com/apollographql/apollo-client/blob/main/src/utilities/common/canonicalStringify.ts).\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * This cache contains the sorted keys of objects that are stringified by\n   * `canonicalStringify`.\n   * It uses the stringified unsorted keys of objects as keys.\n   * The cache will not grow beyond the size of different object **shapes**\n   * encountered in an application, no matter how much actual data gets stringified.\n   *\n   * @privateRemarks\n   * Cache size for the `sortingMap` in `canonicalStringify`.\n   */\n  canonicalStringify: number;\n  /**\n   * A cache inside of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * Can be called with user-defined or already-transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   *\n   * Cache size for the `transform` method of FragmentRegistry.\n   * This function is called as part of the `defaultDocumentTransform` which will be called with\n   * user-provided and already-transformed DocumentNodes.\n   *\n   */\n  \"fragmentRegistry.transform\": number;\n  /**\n   * A cache inside of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * This function is called with fragment names in the form of a string.\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * The size of this case should be chosen with the number of fragments in\n   * your application in mind.\n   *\n   * Note:\n   * This function is a dependency of `fragmentRegistry.transform`, so having too small of a cache size here\n   * might involuntarily invalidate values in the `transform` cache.\n   *\n   * @privateRemarks\n   * Cache size for the `lookup` method of FragmentRegistry.\n   */\n  \"fragmentRegistry.lookup\": number;\n  /**\n   * Cache size for the `findFragmentSpreads` method of [`FragmentRegistry`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/fragmentRegistry.ts).\n   *\n   * This function is called with transformed `DocumentNode`s, as well as recursively\n   * with every fragment spread referenced within that, or a fragment referenced by a\n   * fragment spread.\n   *\n   * @defaultValue\n   * Defaults to `4000`.\n   *\n   * @remarks\n   *\n   * Note: This function is a dependency of `fragmentRegistry.transform`, so having too small of cache size here\n   * might involuntarily invalidate values in the `transform` cache.\n   */\n  \"fragmentRegistry.findFragmentSpreads\": number;\n  /**\n   * Cache size for the `getFragmentDoc` method of [`ApolloCache`](https://github.com/apollographql/apollo-client/blob/main/src/cache/core/cache.ts).\n   *\n   * This function is called with user-provided fragment definitions.\n   *\n   * @defaultValue\n   * Defaults to `1000`.\n   *\n   * @remarks\n   * This function is called from `readFragment` with user-provided fragment definitions.\n   */\n  \"cache.fragmentQueryDocuments\": number;\n  /**\n   * Cache used in [`removeTypenameFromVariables`](https://github.com/apollographql/apollo-client/blob/main/src/link/remove-typename/removeTypenameFromVariables.ts).\n   *\n   * This function is called transformed `DocumentNode`s.\n   *\n   * @defaultValue\n   * Defaults to `2000`.\n   *\n   * @privateRemarks\n   * Cache size for the `getVariableDefinitions` function of `removeTypenameFromVariables`.\n   */\n  \"removeTypenameFromVariables.getVariableDefinitions\": number;\n  /**\n   * Cache size for the `maybeBroadcastWatch` method on [`InMemoryCache`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/inMemoryCache.ts).\n   *\n   * Note: `maybeBroadcastWatch` will be set to the `resultCacheMaxSize` option and\n   * will fall back to this configuration value if the option is not set.\n   *\n   * @defaultValue\n   * Defaults to `5000`.\n   *\n   * @remarks\n   * This method is used for dependency tracking in the `InMemoryCache` and\n   * prevents from unnecessary re-renders.\n   * It is recommended to keep this value significantly higher than the number of\n   * possible subscribers you will have active at the same time in your application\n   * at any time.\n   */\n  \"inMemoryCache.maybeBroadcastWatch\": number;\n  /**\n   * Cache size for the `executeSelectionSet` method on [`StoreReader`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/readFromStore.ts).\n   *\n   * Note:\n   * `executeSelectionSet` will be set to the `resultCacheMaxSize` option and\n   * will fall back to this configuration value if the option is not set.\n   *\n   * @defaultValue\n   * Defaults to `50000`.\n   *\n   * @remarks\n   * Every object that is read from the cache will be cached here, so it is\n   * recommended to set this to a high value.\n   */\n  \"inMemoryCache.executeSelectionSet\": number;\n  /**\n   * Cache size for the `executeSubSelectedArray` method on [`StoreReader`](https://github.com/apollographql/apollo-client/blob/main/src/cache/inmemory/readFromStore.ts).\n   *\n   * Note:\n   * `executeSubSelectedArray` will be set to the `resultCacheMaxSize` option and\n   * will fall back to this configuration value if the option is not set.\n   *\n   * @defaultValue\n   * Defaults to `10000`.\n   *\n   * @remarks\n   * Every array that is read from the cache will be cached here, so it is\n   * recommended to set this to a high value.\n   */\n  \"inMemoryCache.executeSubSelectedArray\": number;\n}\n\nconst cacheSizeSymbol = Symbol.for(\"apollo.cacheSize\");\n/**\n *\n * The global cache size configuration for Apollo Client.\n *\n * @remarks\n *\n * You can directly modify this object, but any modification will\n * only have an effect on caches that are created after the modification.\n *\n * So for global caches, such as `parser`, `canonicalStringify` and `print`,\n * you might need to call `.reset` on them, which will essentially re-create them.\n *\n * Alternatively, you can set `globalThis[Symbol.for(\"apollo.cacheSize\")]` before\n * you load the Apollo Client package:\n *\n * @example\n * ```ts\n * globalThis[Symbol.for(\"apollo.cacheSize\")] = {\n *   parser: 100\n * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript\n * ```\n */\nexport const cacheSizes: Partial<CacheSizes> = { ...global[cacheSizeSymbol] };\n\nexport const enum defaultCacheSizes {\n  parser = 1000,\n  canonicalStringify = 1000,\n  print = 2000,\n  \"documentTransform.cache\" = 2000,\n  \"queryManager.getDocumentInfo\" = 2000,\n  \"PersistedQueryLink.persistedQueryHashes\" = 2000,\n  \"fragmentRegistry.transform\" = 2000,\n  \"fragmentRegistry.lookup\" = 1000,\n  \"fragmentRegistry.findFragmentSpreads\" = 4000,\n  \"cache.fragmentQueryDocuments\" = 1000,\n  \"removeTypenameFromVariables.getVariableDefinitions\" = 2000,\n  \"inMemoryCache.maybeBroadcastWatch\" = 5000,\n  \"inMemoryCache.executeSelectionSet\" = 50000,\n  \"inMemoryCache.executeSubSelectedArray\" = 10000,\n}\n"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;;;AAsR7C,IAAM,eAAe,GAAG,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAuBhD,IAAM,UAAU,GAAA,CAAA,GAAA,kIAAA,CAAA,WAAA,EAAA,CAAA,yMAA6B,SAAM,CAAC,eAAe,CAAC,CAAE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 860, "column": 0}, "map": {"version":3,"file":"getMemoryInternals.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/caching/getMemoryInternals.ts"],"sourcesContent":["import type { OptimisticWrapperFunction } from \"optimism\";\nimport type {\n  InMemoryCache,\n  DocumentTransform,\n  ApolloLink,\n  ApolloCache,\n} from \"../../core/index.js\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport type { CacheSizes } from \"./sizes.js\";\nimport { cacheSizes, defaultCacheSizes } from \"./sizes.js\";\n\nconst globalCaches: {\n  print?: () => number;\n  parser?: () => number;\n  canonicalStringify?: () => number;\n} = {};\n\nexport function registerGlobalCache(\n  name: keyof typeof globalCaches,\n  getSize: () => number\n) {\n  globalCaches[name] = getSize;\n}\n\n/**\n * Transformative helper type to turn a function of the form\n * ```ts\n * (this: any) => R\n * ```\n * into a function of the form\n * ```ts\n * () => R\n * ```\n * preserving the return type, but removing the `this` parameter.\n *\n * @remarks\n *\n * Further down in the definitions of `_getApolloClientMemoryInternals`,\n * `_getApolloCacheMemoryInternals` and `_getInMemoryCacheMemoryInternals`,\n * having the `this` parameter annotation is extremely useful for type checking\n * inside the function.\n *\n * If this is preserved in the exported types, though, it leads to a situation\n * where `ApolloCache.getMemoryInternals` is a function that requires a `this`\n * of the type `ApolloCache`, while the extending class `InMemoryCache` has a\n * `getMemoryInternals` function that requires a `this` of the type\n * `InMemoryCache`.\n * This is not compatible with TypeScript's inheritence system (although it is\n * perfectly correct), and so TypeScript will complain loudly.\n *\n * We still want to define our functions with the `this` annotation, though,\n * and have the return type inferred.\n * (This requirement for return type inference here makes it impossible to use\n * a function overload that is more explicit on the inner overload than it is\n * on the external overload.)\n *\n * So in the end, we use this helper to remove the `this` annotation from the\n * exported function types, while keeping it in the internal implementation.\n *\n */\ntype RemoveThis<T> = T extends (this: any) => infer R ? () => R : never;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloClientMemoryInternals =\n  __DEV__ ?\n    (_getApolloClientMemoryInternals as RemoveThis<\n      typeof _getApolloClientMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getInMemoryCacheMemoryInternals =\n  __DEV__ ?\n    (_getInMemoryCacheMemoryInternals as RemoveThis<\n      typeof _getInMemoryCacheMemoryInternals\n    >)\n  : undefined;\n\n/**\n * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead\n * @internal\n */\nexport const getApolloCacheMemoryInternals =\n  __DEV__ ?\n    (_getApolloCacheMemoryInternals as RemoveThis<\n      typeof _getApolloCacheMemoryInternals\n    >)\n  : undefined;\n\nfunction getCurrentCacheSizes() {\n  // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here\n  const defaults: Record<keyof CacheSizes, number> = {\n    parser: defaultCacheSizes[\"parser\"],\n    canonicalStringify: defaultCacheSizes[\"canonicalStringify\"],\n    print: defaultCacheSizes[\"print\"],\n    \"documentTransform.cache\": defaultCacheSizes[\"documentTransform.cache\"],\n    \"queryManager.getDocumentInfo\":\n      defaultCacheSizes[\"queryManager.getDocumentInfo\"],\n    \"PersistedQueryLink.persistedQueryHashes\":\n      defaultCacheSizes[\"PersistedQueryLink.persistedQueryHashes\"],\n    \"fragmentRegistry.transform\":\n      defaultCacheSizes[\"fragmentRegistry.transform\"],\n    \"fragmentRegistry.lookup\": defaultCacheSizes[\"fragmentRegistry.lookup\"],\n    \"fragmentRegistry.findFragmentSpreads\":\n      defaultCacheSizes[\"fragmentRegistry.findFragmentSpreads\"],\n    \"cache.fragmentQueryDocuments\":\n      defaultCacheSizes[\"cache.fragmentQueryDocuments\"],\n    \"removeTypenameFromVariables.getVariableDefinitions\":\n      defaultCacheSizes[\"removeTypenameFromVariables.getVariableDefinitions\"],\n    \"inMemoryCache.maybeBroadcastWatch\":\n      defaultCacheSizes[\"inMemoryCache.maybeBroadcastWatch\"],\n    \"inMemoryCache.executeSelectionSet\":\n      defaultCacheSizes[\"inMemoryCache.executeSelectionSet\"],\n    \"inMemoryCache.executeSubSelectedArray\":\n      defaultCacheSizes[\"inMemoryCache.executeSubSelectedArray\"],\n  };\n  return Object.fromEntries(\n    Object.entries(defaults).map(([k, v]) => [\n      k,\n      cacheSizes[k as keyof CacheSizes] || v,\n    ])\n  );\n}\n\nfunction _getApolloClientMemoryInternals(this: ApolloClient<any>) {\n  if (!__DEV__) throw new Error(\"only supported in development mode\");\n\n  return {\n    limits: getCurrentCacheSizes(),\n    sizes: {\n      print: globalCaches.print?.(),\n      parser: globalCaches.parser?.(),\n      canonicalStringify: globalCaches.canonicalStringify?.(),\n      links: linkInfo(this.link),\n      queryManager: {\n        getDocumentInfo: this[\"queryManager\"][\"transformCache\"].size,\n        documentTransforms: transformInfo(\n          this[\"queryManager\"].documentTransform\n        ),\n      },\n      ...(this.cache.getMemoryInternals?.() as Partial<\n        ReturnType<typeof _getApolloCacheMemoryInternals>\n      > &\n        Partial<ReturnType<typeof _getInMemoryCacheMemoryInternals>>),\n    },\n  };\n}\n\nfunction _getApolloCacheMemoryInternals(this: ApolloCache<any>) {\n  return {\n    cache: {\n      fragmentQueryDocuments: getWrapperInformation(this[\"getFragmentDoc\"]),\n    },\n  };\n}\n\nfunction _getInMemoryCacheMemoryInternals(this: InMemoryCache) {\n  const fragments = this.config.fragments as\n    | undefined\n    | {\n        findFragmentSpreads?: Function;\n        transform?: Function;\n        lookup?: Function;\n      };\n\n  return {\n    ..._getApolloCacheMemoryInternals.apply(this as any),\n    addTypenameDocumentTransform: transformInfo(this[\"addTypenameTransform\"]),\n    inMemoryCache: {\n      executeSelectionSet: getWrapperInformation(\n        this[\"storeReader\"][\"executeSelectionSet\"]\n      ),\n      executeSubSelectedArray: getWrapperInformation(\n        this[\"storeReader\"][\"executeSubSelectedArray\"]\n      ),\n      maybeBroadcastWatch: getWrapperInformation(this[\"maybeBroadcastWatch\"]),\n    },\n    fragmentRegistry: {\n      findFragmentSpreads: getWrapperInformation(\n        fragments?.findFragmentSpreads\n      ),\n      lookup: getWrapperInformation(fragments?.lookup),\n      transform: getWrapperInformation(fragments?.transform),\n    },\n  };\n}\n\nfunction isWrapper(f?: Function): f is OptimisticWrapperFunction<any, any> {\n  return !!f && \"dirtyKey\" in f;\n}\n\nfunction getWrapperInformation(f?: Function) {\n  return isWrapper(f) ? f.size : undefined;\n}\n\nfunction isDefined<T>(value: T | undefined | null): value is T {\n  return value != null;\n}\n\nfunction transformInfo(transform?: DocumentTransform) {\n  return recurseTransformInfo(transform).map((cache) => ({ cache }));\n}\n\nfunction recurseTransformInfo(transform?: DocumentTransform): number[] {\n  return transform ?\n      [\n        getWrapperInformation(transform?.[\"performWork\"]),\n        ...recurseTransformInfo(transform?.[\"left\"]),\n        ...recurseTransformInfo(transform?.[\"right\"]),\n      ].filter(isDefined)\n    : [];\n}\n\nfunction linkInfo(link?: ApolloLink): unknown[] {\n  return link ?\n      [\n        link?.getMemoryInternals?.(),\n        ...linkInfo(link?.left),\n        ...linkInfo(link?.right),\n      ].filter(isDefined)\n    : [];\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 976, "column": 0}, "map": {"version":3,"file":"canonicalStringify.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/canonicalStringify.ts"],"sourcesContent":["import {\n  AutoCleanedStrongCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/caching/index.js\";\nimport { registerGlobalCache } from \"../caching/getMemoryInternals.js\";\n\n/**\n * Like JSON.stringify, but with object keys always sorted in the same order.\n *\n * To achieve performant sorting, this function uses a Map from JSON-serialized\n * arrays of keys (in any order) to sorted arrays of the same keys, with a\n * single sorted array reference shared by all permutations of the keys.\n *\n * As a drawback, this function will add a little bit more memory for every\n * object encountered that has different (more, less, a different order of) keys\n * than in the past.\n *\n * In a typical application, this extra memory usage should not play a\n * significant role, as `canonicalStringify` will be called for only a limited\n * number of object shapes, and the cache will not grow beyond a certain point.\n * But in some edge cases, this could be a problem, so we provide\n * canonicalStringify.reset() as a way of clearing the cache.\n * */\nexport const canonicalStringify = Object.assign(\n  function canonicalStringify(value: any): string {\n    return JSON.stringify(value, stableObjectReplacer);\n  },\n  {\n    reset() {\n      // Clearing the sortingMap will reclaim all cached memory, without\n      // affecting the logical results of canonicalStringify, but potentially\n      // sacrificing performance until the cache is refilled.\n      sortingMap = new AutoCleanedStrongCache<string, readonly string[]>(\n        cacheSizes.canonicalStringify || defaultCacheSizes.canonicalStringify\n      );\n    },\n  }\n);\n\nif (__DEV__) {\n  registerGlobalCache(\"canonicalStringify\", () => sortingMap.size);\n}\n\n// Values are JSON-serialized arrays of object keys (in any order), and values\n// are sorted arrays of the same keys.\nlet sortingMap!: AutoCleanedStrongCache<string, readonly string[]>;\ncanonicalStringify.reset();\n\n// The JSON.stringify function takes an optional second argument called a\n// replacer function. This function is called for each key-value pair in the\n// object being stringified, and its return value is used instead of the\n// original value. If the replacer function returns a new value, that value is\n// stringified as JSON instead of the original value of the property.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter\nfunction stableObjectReplacer(key: string, value: any) {\n  if (value && typeof value === \"object\") {\n    const proto = Object.getPrototypeOf(value);\n    // We don't want to mess with objects that are not \"plain\" objects, which\n    // means their prototype is either Object.prototype or null. This check also\n    // prevents needlessly rearranging the indices of arrays.\n    if (proto === Object.prototype || proto === null) {\n      const keys = Object.keys(value);\n      // If keys is already sorted, let JSON.stringify serialize the original\n      // value instead of creating a new object with keys in the same order.\n      if (keys.every(everyKeyInOrder)) return value;\n      const unsortedKey = JSON.stringify(keys);\n      let sortedKeys = sortingMap.get(unsortedKey);\n      if (!sortedKeys) {\n        keys.sort();\n        const sortedKey = JSON.stringify(keys);\n        // Checking for sortedKey in the sortingMap allows us to share the same\n        // sorted array reference for all permutations of the same set of keys.\n        sortedKeys = sortingMap.get(sortedKey) || keys;\n        sortingMap.set(unsortedKey, sortedKeys);\n        sortingMap.set(sortedKey, sortedKeys);\n      }\n      const sortedObject = Object.create(proto);\n      // Reassigning the keys in sorted order will cause JSON.stringify to\n      // serialize them in sorted order.\n      sortedKeys.forEach((key) => {\n        sortedObject[key] = value[key];\n      });\n      return sortedObject;\n    }\n  }\n  return value;\n}\n\n// Since everything that happens in stableObjectReplacer benefits from being as\n// efficient as possible, we use a static function as the callback for\n// keys.every in order to test if the provided keys are already sorted without\n// allocating extra memory for a callback.\nfunction everyKeyInOrder(\n  key: string,\n  i: number,\n  keys: readonly string[]\n): boolean {\n  return i === 0 || keys[i - 1] <= key;\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EACL,sBAAsB,EACtB,UAAU,GAEX,MAAM,kCAAkC,CAAC;;AAC1C,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;;;AAmBhE,IAAM,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAC7C,SAAS,kBAAkB,CAAC,KAAU;IACpC,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;AACrD,CAAC,EACD;IACE,KAAK,EAAA;QACH,kEAAkE;QAClE,uEAAuE;QACvE,uDAAuD;QACvD,UAAU,GAAG,qKAAI,yBAAsB,iKACrC,aAAU,CAAC,kBAAkB,IAAA,KAAA,wCAAA,EAAwC,CACtE,CAAC;IACJ,CAAC;CACF,CACF,CAAC;AAEF,IAAI,OAAO,EAAE,CAAC,CAAA,OAAA,KAAA,OAAA;qLACZ,sBAAA,AAAmB,EAAC,oBAAoB,EAAE;QAAM,OAAA,UAAU,CAAC,IAAI;IAAf,CAAe,CAAC,CAAC;AACnE,CAAC;AAED,8EAA8E;AAC9E,sCAAsC;AACtC,IAAI,UAA8D,CAAC;AACnE,kBAAkB,CAAC,KAAK,EAAE,CAAC;AAE3B,yEAAyE;AACzE,4EAA4E;AAC5E,wEAAwE;AACxE,8EAA8E;AAC9E,qEAAqE;AACrE,yHAAyH;AACzH,SAAS,oBAAoB,CAAC,GAAW,EAAE,KAAU;IACnD,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;QACvC,IAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC3C,yEAAyE;QACzE,4EAA4E;QAC5E,yDAAyD;QACzD,IAAI,KAAK,KAAK,MAAM,CAAC,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACjD,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,uEAAuE;YACvE,sEAAsE;YACtE,IAAI,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE,OAAO,KAAK,CAAC;YAC9C,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACzC,IAAI,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,CAAC,UAAU,EAAE,CAAC;gBAChB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,IAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACvC,uEAAuE;gBACvE,uEAAuE;gBACvE,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;gBAC/C,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;gBACxC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;YACxC,CAAC;YACD,IAAM,cAAY,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC1C,oEAAoE;YACpE,kCAAkC;YAClC,UAAU,CAAC,OAAO,CAAC,SAAC,GAAG;gBACrB,cAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;YACH,OAAO,cAAY,CAAC;QACtB,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,+EAA+E;AAC/E,sEAAsE;AACtE,8EAA8E;AAC9E,0CAA0C;AAC1C,SAAS,eAAe,CACtB,GAAW,EACX,CAAS,EACT,IAAuB;IAEvB,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC;AACvC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1055, "column": 0}, "map": {"version":3,"file":"storeUtils.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/graphql/storeUtils.ts"],"sourcesContent":["import { newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n  SelectionSetNode,\n  DocumentNode,\n  FragmentSpreadNode,\n} from \"graphql\";\n\nimport { isNonNullObject } from \"../common/objects.js\";\nimport type { FragmentMap } from \"./fragments.js\";\nimport { getFragmentFromSelection } from \"./fragments.js\";\nimport { canonicalStringify } from \"../common/canonicalStringify.js\";\n\nexport interface Reference {\n  readonly __ref: string;\n}\n\nexport function makeReference(id: string): Reference {\n  return { __ref: String(id) };\n}\n\nexport function isReference(obj: any): obj is Reference {\n  return Boolean(\n    obj && typeof obj === \"object\" && typeof obj.__ref === \"string\"\n  );\n}\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | Reference\n  | Reference[]\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport interface StoreObject {\n  __typename?: string;\n  [storeFieldName: string]: StoreValue;\n}\n\n/**\n * Workaround for a TypeScript quirk:\n * types per default have an implicit index signature that makes them\n * assignable to `StoreObject`.\n * interfaces do not have that implicit index signature, so they cannot\n * be assigned to `StoreObject`.\n * This type just maps over a type or interface that is passed in,\n * implicitly adding the index signature.\n * That way, the result can be assigned to `StoreObject`.\n *\n * This is important if some user-defined interface is used e.g.\n * in cache.modify, where the `toReference` method expects a\n * `StoreObject` as input.\n */\nexport type AsStoreObject<T extends { __typename?: string }> = {\n  [K in keyof T]: T[K];\n};\n\nexport function isDocumentNode(value: any): value is DocumentNode {\n  return (\n    isNonNullObject(value) &&\n    (value as DocumentNode).kind === \"Document\" &&\n    Array.isArray((value as DocumentNode).definitions)\n  );\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === \"StringValue\";\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === \"BooleanValue\";\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === \"IntValue\";\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === \"FloatValue\";\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === \"Variable\";\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === \"ObjectValue\";\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === \"ListValue\";\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === \"EnumValue\";\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === \"NullValue\";\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map((obj) =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables)\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map((listValue) => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw newInvariantError(\n      `The inline argument \"%s\" of kind \"%s\"` +\n        \"is not supported. Use variables instead of inline arguments to \" +\n        \"overcome this limitation.\",\n      name.value,\n      (value as any).kind\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach((directive) => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables\n          )\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  \"connection\",\n  \"include\",\n  \"skip\",\n  \"client\",\n  \"rest\",\n  \"export\",\n  \"nonreactive\",\n];\n\n// Default stable JSON.stringify implementation used by getStoreKeyName. Can be\n// updated/replaced with something better by calling\n// getStoreKeyName.setStringify(newStringifyFunction).\nlet storeKeyNameStringify: (value: any) => string = canonicalStringify;\n\nexport const getStoreKeyName = Object.assign(\n  function (\n    fieldName: string,\n    args?: Record<string, any> | null,\n    directives?: Directives\n  ): string {\n    if (\n      args &&\n      directives &&\n      directives[\"connection\"] &&\n      directives[\"connection\"][\"key\"]\n    ) {\n      if (\n        directives[\"connection\"][\"filter\"] &&\n        (directives[\"connection\"][\"filter\"] as string[]).length > 0\n      ) {\n        const filterKeys =\n          directives[\"connection\"][\"filter\"] ?\n            (directives[\"connection\"][\"filter\"] as string[])\n          : [];\n        filterKeys.sort();\n\n        const filteredArgs = {} as { [key: string]: any };\n        filterKeys.forEach((key) => {\n          filteredArgs[key] = args[key];\n        });\n\n        return `${directives[\"connection\"][\"key\"]}(${storeKeyNameStringify(\n          filteredArgs\n        )})`;\n      } else {\n        return directives[\"connection\"][\"key\"];\n      }\n    }\n\n    let completeFieldName: string = fieldName;\n\n    if (args) {\n      // We can't use `JSON.stringify` here since it's non-deterministic,\n      // and can lead to different store key names being created even though\n      // the `args` object used during creation has the same properties/values.\n      const stringifiedArgs: string = storeKeyNameStringify(args);\n      completeFieldName += `(${stringifiedArgs})`;\n    }\n\n    if (directives) {\n      Object.keys(directives).forEach((key) => {\n        if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n        if (directives[key] && Object.keys(directives[key]).length) {\n          completeFieldName += `@${key}(${storeKeyNameStringify(\n            directives[key]\n          )})`;\n        } else {\n          completeFieldName += `@${key}`;\n        }\n      });\n    }\n\n    return completeFieldName;\n  },\n  {\n    setStringify(s: typeof storeKeyNameStringify) {\n      const previous = storeKeyNameStringify;\n      storeKeyNameStringify = s;\n      return previous;\n    },\n  }\n);\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables?: Record<string, any>\n): Object | null {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables)\n    );\n    return argObj;\n  }\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function getTypenameFromResult(\n  result: Record<string, any>,\n  selectionSet: SelectionSetNode,\n  fragmentMap?: FragmentMap\n): string | undefined {\n  let fragments: undefined | Array<InlineFragmentNode | FragmentSpreadNode>;\n  for (const selection of selectionSet.selections) {\n    if (isField(selection)) {\n      if (selection.name.value === \"__typename\") {\n        return result[resultKeyNameFromField(selection)];\n      }\n    } else if (fragments) {\n      fragments.push(selection);\n    } else {\n      fragments = [selection];\n    }\n  }\n  if (typeof result.__typename === \"string\") {\n    return result.__typename;\n  }\n  if (fragments) {\n    for (const selection of fragments) {\n      const typename = getTypenameFromResult(\n        result,\n        getFragmentFromSelection(selection, fragmentMap)!.selectionSet,\n        fragmentMap\n      );\n      if (typeof typename === \"string\") {\n        return typename;\n      }\n    }\n  }\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === \"Field\";\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode\n): selection is InlineFragmentNode {\n  return selection.kind === \"InlineFragment\";\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1275, "column": 0}, "map": {"version":3,"file":"getFromAST.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/graphql/getFromAST.ts"],"sourcesContent":["import { invariant, newInvariantError } from \"../globals/index.js\";\n\nimport type {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from \"graphql\";\n\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\n\ntype OperationDefinitionWithName = OperationDefinitionNode & {\n  name: NonNullable<OperationDefinitionNode[\"name\"]>;\n};\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  const operations = doc.definitions\n    .filter((d) => d.kind !== \"FragmentDefinition\")\n    .map((definition) => {\n      if (definition.kind !== \"OperationDefinition\") {\n        throw newInvariantError(\n          `Schema type definitions not allowed in queries. Found: \"%s\"`,\n          definition.kind\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains %s operations`,\n    operations.length\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    (definition): definition is OperationDefinitionNode =>\n      definition.kind === \"OperationDefinition\"\n  )[0];\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        (definition): definition is OperationDefinitionWithName =>\n          definition.kind === \"OperationDefinition\" && !!definition.name\n      )\n      .map((x) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    (definition): definition is FragmentDefinitionNode =>\n      definition.kind === \"FragmentDefinition\"\n  );\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc)!;\n\n  invariant(\n    queryDef && queryDef.operation === \"query\",\n    \"Must contain a query definition.\"\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === \"Document\",\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    \"Fragment must have exactly one definition.\"\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === \"FragmentDefinition\",\n    \"Must be a fragment definition.\"\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === \"OperationDefinition\") {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === \"query\" ||\n        operation === \"mutation\" ||\n        operation === \"subscription\"\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === \"FragmentDefinition\" && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw newInvariantError(\n    \"Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.\"\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach((def) => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1373, "column": 0}, "map": {"version":3,"file":"iteration.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/observables/iteration.ts"],"sourcesContent":["import type { Observer } from \"./Observable.js\";\n\nexport function iterateObserversSafely<E, A>(\n  observers: Set<Observer<E>>,\n  method: keyof Observer<E>,\n  argument?: A\n) {\n  // In case observers is modified during iteration, we need to commit to the\n  // original elements, which also provides an opportunity to filter them down\n  // to just the observers with the given method.\n  const observersWithMethod: Observer<E>[] = [];\n  observers.forEach((obs) => obs[method] && observersWithMethod.push(obs));\n  observersWithMethod.forEach((obs) => (obs as any)[method](argument));\n}\n"],"names":[],"mappings":";;;AAEM,SAAU,sBAAsB,CACpC,SAA2B,EAC3B,MAAyB,EACzB,QAAY;IAEZ,2EAA2E;IAC3E,4EAA4E;IAC5E,+CAA+C;IAC/C,IAAM,mBAAmB,GAAkB,EAAE,CAAC;IAC9C,SAAS,CAAC,OAAO,CAAC,SAAC,GAAG;QAAK,OAAA,GAAG,CAAC,MAAM,CAAC,IAAI,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC;IAA5C,CAA4C,CAAC,CAAC;IACzE,mBAAmB,CAAC,OAAO,CAAC,SAAC,GAAG;QAAK,OAAC,GAAW,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC;IAA9B,CAA8B,CAAC,CAAC;AACvE,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1394, "column": 0}, "map": {"version":3,"file":"subclassing.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/observables/subclassing.ts"],"sourcesContent":["import { Observable } from \"./Observable.js\";\nimport { canUseSymbol } from \"../common/canUse.js\";\n\n// Generic implementations of Observable.prototype methods like map and\n// filter need to know how to create a new Observable from an Observable\n// subclass (like Concast or ObservableQuery). Those methods assume\n// (perhaps unwisely?) that they can call the subtype's constructor with a\n// Subscriber function, even though the subclass constructor might expect\n// different parameters. Defining this static Symbol.species property on\n// the subclass is a hint to generic Observable code to use the default\n// constructor instead of trying to do `new Subclass(observer => ...)`.\nexport function fixObservableSubclass<\n  S extends new (...args: any[]) => Observable<any>,\n>(subclass: S): S {\n  function set(key: symbol | string) {\n    // Object.defineProperty is necessary because the Symbol.species\n    // property is a getter by default in modern JS environments, so we\n    // can't assign to it with a normal assignment expression.\n    Object.defineProperty(subclass, key, { value: Observable });\n  }\n  if (canUseSymbol && Symbol.species) {\n    set(Symbol.species);\n  }\n  // The \"@@species\" string is used as a fake Symbol.species value in some\n  // polyfill systems (including the SymbolSpecies variable used by\n  // zen-observable), so we should set it as well, to be safe.\n  set(\"@@species\");\n  return subclass;\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;;;AAU7C,SAAU,qBAAqB,CAEnC,QAAW;IACX,SAAS,GAAG,CAAC,GAAoB;QAC/B,gEAAgE;QAChE,mEAAmE;QACnE,0DAA0D;QAC1D,MAAM,CAAC,cAAc,CAAC,QAAQ,EAAE,GAAG,EAAE;YAAE,KAAK,gJAAE,aAAU;QAAA,CAAE,CAAC,CAAC;IAC9D,CAAC;IACD,oKAAI,eAAY,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;QACnC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACtB,CAAC;IACD,wEAAwE;IACxE,iEAAiE;IACjE,4DAA4D;IAC5D,GAAG,CAAC,WAAW,CAAC,CAAC;IACjB,OAAO,QAAQ,CAAC;AAClB,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1425, "column": 0}, "map": {"version":3,"file":"preventUnhandledRejection.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/promises/preventUnhandledRejection.ts"],"sourcesContent":["export function preventUnhandledRejection<T>(promise: Promise<T>): Promise<T> {\n  promise.catch(() => {});\n\n  return promise;\n}\n"],"names":[],"mappings":";;;AAAM,SAAU,yBAAyB,CAAI,OAAmB;IAC9D,OAAO,CAAC,KAAK,CAAC,YAAO,CAAC,CAAC,CAAC;IAExB,OAAO,OAAO,CAAC;AACjB,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1438, "column": 0}, "map": {"version":3,"file":"directives.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/graphql/directives.ts"],"sourcesContent":["import { invariant } from \"../globals/index.js\";\n\n// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport type {\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n  ASTNode,\n  FragmentSpreadNode,\n} from \"graphql\";\nimport { visit, BREAK, Kind } from \"graphql\";\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function shouldInclude(\n  { directives }: SelectionNode,\n  variables?: Record<string, any>\n): boolean {\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(\n    ({ directive, ifArgument }) => {\n      let evaledValue: boolean = false;\n      if (ifArgument.value.kind === \"Variable\") {\n        evaledValue =\n          variables && variables[(ifArgument.value as VariableNode).name.value];\n        invariant(\n          evaledValue !== void 0,\n          `Invalid variable referenced in @%s directive.`,\n          directive.name.value\n        );\n      } else {\n        evaledValue = (ifArgument.value as BooleanValueNode).value;\n      }\n      return directive.name.value === \"skip\" ? !evaledValue : evaledValue;\n    }\n  );\n}\n\nexport function getDirectiveNames(root: ASTNode) {\n  const names: string[] = [];\n\n  visit(root, {\n    Directive(node: DirectiveNode) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport const hasAnyDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, false);\n\nexport const hasAllDirectives = (names: string[], root: ASTNode) =>\n  hasDirectives(names, root, true);\n\nexport function hasDirectives(names: string[], root: ASTNode, all?: boolean) {\n  const nameSet = new Set(names);\n  const uniqueCount = nameSet.size;\n\n  visit(root, {\n    Directive(node) {\n      if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {\n        return BREAK;\n      }\n    },\n  });\n\n  // If we found all the names, nameSet will be empty. If we only care about\n  // finding some of them, the < condition is sufficient.\n  return all ? !nameSet.size : nameSet.size < uniqueCount;\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return document && hasDirectives([\"client\", \"export\"], document, true);\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === \"skip\" || value === \"include\";\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>\n): InclusionDirectives {\n  const result: InclusionDirectives = [];\n\n  if (directives && directives.length) {\n    directives.forEach((directive) => {\n      if (!isInclusionDirective(directive)) return;\n\n      const directiveArguments = directive.arguments;\n      const directiveName = directive.name.value;\n\n      invariant(\n        directiveArguments && directiveArguments.length === 1,\n        `Incorrect number of arguments for the @%s directive.`,\n        directiveName\n      );\n\n      const ifArgument = directiveArguments![0];\n      invariant(\n        ifArgument.name && ifArgument.name.value === \"if\",\n        `Invalid argument for the @%s directive.`,\n        directiveName\n      );\n\n      const ifValue: ValueNode = ifArgument.value;\n\n      // means it has to be a variable value if this is a valid @skip or @include directive\n      invariant(\n        ifValue &&\n          (ifValue.kind === \"Variable\" || ifValue.kind === \"BooleanValue\"),\n        `Argument for the @%s directive must be a variable or a boolean value.`,\n        directiveName\n      );\n\n      result.push({ directive, ifArgument });\n    });\n  }\n\n  return result;\n}\n\n/** @internal */\nexport function getFragmentMaskMode(\n  fragment: FragmentSpreadNode\n): \"mask\" | \"migrate\" | \"unmask\" {\n  const directive = fragment.directives?.find(\n    ({ name }) => name.value === \"unmask\"\n  );\n\n  if (!directive) {\n    return \"mask\";\n  }\n\n  const modeArg = directive.arguments?.find(\n    ({ name }) => name.value === \"mode\"\n  );\n\n  if (__DEV__) {\n    if (modeArg) {\n      if (modeArg.value.kind === Kind.VARIABLE) {\n        invariant.warn(\"@unmask 'mode' argument does not support variables.\");\n      } else if (modeArg.value.kind !== Kind.STRING) {\n        invariant.warn(\"@unmask 'mode' argument must be of type string.\");\n      } else if (modeArg.value.value !== \"migrate\") {\n        invariant.warn(\n          \"@unmask 'mode' argument does not recognize value '%s'.\",\n          modeArg.value.value\n        );\n      }\n    }\n  }\n\n  if (\n    modeArg &&\n    \"value\" in modeArg.value &&\n    modeArg.value.value === \"migrate\"\n  ) {\n    return \"migrate\";\n  }\n\n  return \"unmask\";\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1566, "column": 0}, "map": {"version":3,"file":"equalByQuery.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/core/equalByQuery.ts"],"sourcesContent":["import equal from \"@wry/equality\";\n\nimport type {\n  DirectiveNode,\n  DocumentNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n  SelectionNode,\n  SelectionSetNode,\n} from \"graphql\";\n\nimport type { ApolloQueryResult, OperationVariables } from \"./types.js\";\n\nimport type { FragmentMap } from \"../utilities/index.js\";\nimport {\n  createFragmentMap,\n  getFragmentDefinitions,\n  getFragmentFromSelection,\n  getMainDefinition,\n  isField,\n  resultKeyNameFromField,\n  shouldInclude,\n} from \"../utilities/index.js\";\n\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nexport function equalByQuery(\n  query: DocumentNode,\n  { data: aData, ...aRest }: Partial<ApolloQueryResult<unknown>>,\n  { data: bData, ...bRest }: Partial<ApolloQueryResult<unknown>>,\n  variables?: OperationVariables\n): boolean {\n  return (\n    equal(aRest, bRest) &&\n    equalBySelectionSet(getMainDefinition(query).selectionSet, aData, bData, {\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      variables,\n    })\n  );\n}\n\n// Encapsulates the information used by equalBySelectionSet that does not change\n// during the recursion.\ninterface CompareContext<TVariables> {\n  fragmentMap: FragmentMap;\n  variables: TVariables | undefined;\n}\n\nfunction equalBySelectionSet(\n  selectionSet: SelectionSetNode,\n  aResult: any,\n  bResult: any,\n  context: CompareContext<OperationVariables>\n): boolean {\n  if (aResult === bResult) {\n    return true;\n  }\n\n  const seenSelections = new Set<SelectionNode>();\n\n  // Returning true from this Array.prototype.every callback function skips the\n  // current field/subtree. Returning false aborts the entire traversal\n  // immediately, causing equalBySelectionSet to return false.\n  return selectionSet.selections.every((selection) => {\n    // Avoid re-processing the same selection at the same level of recursion, in\n    // case the same field gets included via multiple indirect fragment spreads.\n    if (seenSelections.has(selection)) return true;\n    seenSelections.add(selection);\n\n    // Ignore @skip(if: true) and @include(if: false) fields.\n    if (!shouldInclude(selection, context.variables)) return true;\n\n    // If the field or (named) fragment spread has a @nonreactive directive on\n    // it, we don't care if it's different, so we pretend it's the same.\n    if (selectionHasNonreactiveDirective(selection)) return true;\n\n    if (isField(selection)) {\n      const resultKey = resultKeyNameFromField(selection);\n      const aResultChild = aResult && aResult[resultKey];\n      const bResultChild = bResult && bResult[resultKey];\n      const childSelectionSet = selection.selectionSet;\n\n      if (!childSelectionSet) {\n        // These are scalar values, so we can compare them with deep equal\n        // without redoing the main recursive work.\n        return equal(aResultChild, bResultChild);\n      }\n\n      const aChildIsArray = Array.isArray(aResultChild);\n      const bChildIsArray = Array.isArray(bResultChild);\n      if (aChildIsArray !== bChildIsArray) return false;\n      if (aChildIsArray && bChildIsArray) {\n        const length = aResultChild.length;\n        if (bResultChild.length !== length) {\n          return false;\n        }\n        for (let i = 0; i < length; ++i) {\n          if (\n            !equalBySelectionSet(\n              childSelectionSet,\n              aResultChild[i],\n              bResultChild[i],\n              context\n            )\n          ) {\n            return false;\n          }\n        }\n        return true;\n      }\n\n      return equalBySelectionSet(\n        childSelectionSet,\n        aResultChild,\n        bResultChild,\n        context\n      );\n    } else {\n      const fragment = getFragmentFromSelection(selection, context.fragmentMap);\n      if (fragment) {\n        // The fragment might === selection if it's an inline fragment, but\n        // could be !== if it's a named fragment ...spread.\n        if (selectionHasNonreactiveDirective(fragment)) return true;\n\n        return equalBySelectionSet(\n          fragment.selectionSet,\n          // Notice that we reuse the same aResult and bResult values here,\n          // since the fragment ...spread does not specify a field name, but\n          // consists of multiple fields (within the fragment's selection set)\n          // that should be applied to the current result value(s).\n          aResult,\n          bResult,\n          context\n        );\n      }\n    }\n  });\n}\n\nfunction selectionHasNonreactiveDirective(\n  selection:\n    | FieldNode\n    | InlineFragmentNode\n    | FragmentSpreadNode\n    | FragmentDefinitionNode\n): boolean {\n  return (\n    !!selection.directives && selection.directives.some(directiveIsNonreactive)\n  );\n}\n\nfunction directiveIsNonreactive(dir: DirectiveNode): boolean {\n  return dir.name.value === \"nonreactive\";\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1661, "column": 0}, "map": {"version":3,"file":"ObservableQuery.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from \"../utilities/globals/index.js\";\nimport type { DocumentNode } from \"graphql\";\nimport { equal } from \"@wry/equality\";\n\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport type {\n  Concast,\n  Observer,\n  ObservableSubscription,\n} from \"../utilities/index.js\";\nimport {\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  iterateObserversSafely,\n  fixObservableSubclass,\n  getQueryDefinition,\n  preventUnhandledRejection,\n} from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport type { QueryManager } from \"./QueryManager.js\";\nimport type {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from \"./types.js\";\nimport type {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n  UpdateQueryMapFn,\n  UpdateQueryOptions,\n} from \"./watchQueryOptions.js\";\nimport type { QueryInfo } from \"./QueryInfo.js\";\nimport type { MissingFieldError } from \"../cache/index.js\";\nimport type { MissingTree } from \"../cache/core/types/common.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nimport type { TODO } from \"../utilities/types/TODO.js\";\nimport type { MaybeMasked, Unmasked } from \"../masking/index.js\";\nimport { Slot } from \"optimism\";\n\nconst { assign, hasOwnProperty } = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables,\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    }\n  ) => TData;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n> extends Observable<ApolloQueryResult<MaybeMasked<TData>>> {\n  /**\n   * @internal\n   * A slot used by the `useQuery` hook to indicate that `client.watchQuery`\n   * should not register the query immediately, but instead wait for the query to\n   * be started registered with the `QueryManager` when `useSyncExternalStore`\n   * actively subscribes to it.\n   */\n  private static inactiveOnCreation = new Slot<boolean>();\n\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  // The `query` computed property will always reflect the document transformed\n  // by the last run query. `this.options.query` will always reflect the raw\n  // untransformed query to ensure document transforms with runtime conditionals\n  // are run on the original document.\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    return this.lastQuery || this.options.query;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  /**\n   * An object containing the variables that were provided for the query.\n   */\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<\n    Observer<ApolloQueryResult<MaybeMasked<TData>>>\n  >();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n  private lastQuery?: DocumentNode;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    let startedInactive = ObservableQuery.inactiveOnCreation.getValue();\n    super((observer: Observer<ApolloQueryResult<MaybeMasked<TData>>>) => {\n      if (startedInactive) {\n        queryManager[\"queries\"].set(this.queryId, queryInfo);\n        startedInactive = false;\n      }\n\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(this.maskResult(last.result));\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    this.subscribeToMore = this.subscribeToMore.bind(this);\n    this.maskResult = this.maskResult.bind(this);\n\n    const {\n      watchQuery: { fetchPolicy: defaultFetchPolicy = \"cache-first\" } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      // Make sure we don't store \"standby\" as the initialFetchPolicy.\n      initialFetchPolicy = fetchPolicy === \"standby\" ? defaultFetchPolicy : (\n        fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<MaybeMasked<TData>>> = {\n        next: (result) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  /** @internal */\n  public resetDiff() {\n    this.queryInfo.resetDiff();\n  }\n\n  private getCurrentFullResult(\n    saveAsLastResult = true\n  ): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.getDocumentInfo(this.query).hasForcedResolvers\n    ) {\n      // Fall through.\n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`.\n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo[\"updateWatch\"]();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      // We need to check for both both `error` and `errors` field because there\n      // are cases where sometimes `error` is set, but not `errors` and\n      // vice-versa. This will be updated in the next major version when\n      // `errors` is deprecated in favor of `error`.\n      if (\n        result.networkStatus === NetworkStatus.ready &&\n        (result.error || result.errors)\n      ) {\n        result.networkStatus = NetworkStatus.error;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  public getCurrentResult(\n    saveAsLastResult = true\n  ): ApolloQueryResult<MaybeMasked<TData>> {\n    return this.maskResult(this.getCurrentFullResult(saveAsLastResult));\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    if (!this.last) {\n      return true;\n    }\n\n    const documentInfo = this.queryManager.getDocumentInfo(this.query);\n    const dataMasking = this.queryManager.dataMasking;\n    const query = dataMasking ? documentInfo.nonReactiveQuery : this.query;\n\n    const resultIsDifferent =\n      dataMasking || documentInfo.hasNonreactiveDirective ?\n        !equalByQuery(query, this.last.result, newResult, this.variables)\n      : !equal(this.last.result, newResult);\n\n    return (\n      resultIsDifferent || (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(\n    variablesMustMatch?: boolean\n  ): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(\n    variables?: Partial<TVariables>\n  ): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === \"no-cache\") {\n      reobserveOptions.fetchPolicy = \"no-cache\";\n    } else {\n      reobserveOptions.fetchPolicy = \"network-only\";\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some((v) => v.variable.name.value === \"variables\")) {\n        invariant.warn(\n          `Called refetch(%o) for query %o, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`,\n          variables,\n          queryDef.name?.value || queryDef\n        );\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  /**\n   * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n   */\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(\n    fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n      updateQuery?: (\n        previousQueryResult: Unmasked<TData>,\n        options: {\n          fetchMoreResult: Unmasked<TFetchData>;\n          variables: TFetchVars;\n        }\n      ) => Unmasked<TData>;\n    }\n  ): Promise<ApolloQueryResult<MaybeMasked<TFetchData>>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : (\n        {\n          ...this.options,\n          query: this.options.query,\n          ...fetchMoreOptions,\n          variables: {\n            ...this.options.variables,\n            ...fetchMoreOptions.variables,\n          },\n        }\n      )),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    combinedOptions.query = this.transformDocument(combinedOptions.query);\n\n    const qid = this.queryManager.generateQueryId();\n\n    // If a temporary query is passed to `fetchMore`, we don't want to store\n    // it as the last query result since it may be an optimized query for\n    // pagination. We will however run the transforms on the original document\n    // as well as the document passed in `fetchMoreOptions` to ensure the cache\n    // uses the most up-to-date document which may rely on runtime conditionals.\n    this.lastQuery =\n      fetchMoreOptions.query ?\n        this.transformDocument(this.options.query)\n      : combinedOptions.query;\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    const updateQuery = fetchMoreOptions?.updateQuery;\n    const isCached = this.options.fetchPolicy !== \"no-cache\";\n\n    if (!isCached) {\n      invariant(\n        updateQuery,\n        \"You must provide an `updateQuery` function when using `fetchMore` with a `no-cache` fetch policy.\"\n      );\n    }\n\n    return this.queryManager\n      .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n      .then((fetchMoreResult) => {\n        this.queryManager.removeQuery(qid);\n\n        if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n          queryInfo.networkStatus = originalNetworkStatus;\n        }\n\n        if (isCached) {\n          // Performing this cache update inside a cache.batch transaction ensures\n          // any affected cache.watch watchers are notified at most once about any\n          // updates. Most watchers will be using the QueryInfo class, which\n          // responds to notifications by calling reobserveCacheFirst to deliver\n          // fetchMore cache results back to this ObservableQuery.\n          this.queryManager.cache.batch({\n            update: (cache) => {\n              const { updateQuery } = fetchMoreOptions;\n              if (updateQuery) {\n                cache.updateQuery(\n                  {\n                    query: this.query,\n                    variables: this.variables,\n                    returnPartialData: true,\n                    optimistic: false,\n                  },\n                  (previous) =>\n                    updateQuery(previous! as any, {\n                      fetchMoreResult: fetchMoreResult.data as any,\n                      variables: combinedOptions.variables as TFetchVars,\n                    })\n                );\n              } else {\n                // If we're using a field policy instead of updateQuery, the only\n                // thing we need to do is write the new data to the cache using\n                // combinedOptions.variables (instead of this.variables, which is\n                // what this.updateQuery uses, because it works by abusing the\n                // original field value, keyed by the original variables).\n                cache.writeQuery({\n                  query: combinedOptions.query,\n                  variables: combinedOptions.variables,\n                  data: fetchMoreResult.data as Unmasked<TFetchData>,\n                });\n              }\n            },\n\n            onWatchUpdated: (watch) => {\n              // Record the DocumentNode associated with any watched query whose\n              // data were updated by the cache writes above.\n              updatedQuerySet.add(watch.query);\n            },\n          });\n        } else {\n          // There is a possibility `lastResult` may not be set when\n          // `fetchMore` is called which would cause this to crash. This should\n          // only happen if we haven't previously reported a result. We don't\n          // quite know what the right behavior should be here since this block\n          // of code runs after the fetch result has executed on the network.\n          // We plan to let it crash in the meantime.\n          //\n          // If we get bug reports due to the `data` property access on\n          // undefined, this should give us a real-world scenario that we can\n          // use to test against and determine the right behavior. If we do end\n          // up changing this behavior, this may require, for example, an\n          // adjustment to the types on `updateQuery` since that function\n          // expects that the first argument always contains previous result\n          // data, but not `undefined`.\n          const lastResult = this.getLast(\"result\")!;\n          const data = updateQuery!(lastResult.data as Unmasked<TData>, {\n            fetchMoreResult: fetchMoreResult.data as Unmasked<TFetchData>,\n            variables: combinedOptions.variables as TFetchVars,\n          });\n\n          this.reportResult(\n            {\n              ...lastResult,\n              networkStatus: originalNetworkStatus!,\n              loading: isNetworkRequestInFlight(originalNetworkStatus),\n              data: data as TData,\n            },\n            this.variables\n          );\n        }\n\n        return this.maskResult(fetchMoreResult);\n      })\n      .finally(() => {\n        // In case the cache writes above did not generate a broadcast\n        // notification (which would have been intercepted by onWatchUpdated),\n        // likely because the written data were the same as what was already in\n        // the cache, we still want fetchMore to deliver its final loading:false\n        // result with the unchanged data.\n        if (isCached && !updatedQuerySet.has(this.query)) {\n          this.reobserveCacheFirst();\n        }\n      });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  /**\n   * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n   *\n   * This function returns _another_ function that you can call to terminate the subscription.\n   */\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables,\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData,\n      TVariables\n    >\n  ): () => void {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: Unmasked<TSubscriptionData> }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery((previous, updateOptions) =>\n              updateQuery(previous, {\n                subscriptionData,\n                ...updateOptions,\n              })\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error(\"Unhandled GraphQL subscription error\", err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    return this.reobserve(newOptions);\n  }\n\n  public silentSetOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>\n  ) {\n    const mergedOptions = compact(this.options, newOptions || {});\n    assign(this.options, mergedOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @param variables - The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables\n  ): Promise<ApolloQueryResult<MaybeMasked<TData>> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve(\n      {\n        // Reset options.fetchPolicy to its original value.\n        fetchPolicy: this.options.initialFetchPolicy,\n        variables,\n      },\n      NetworkStatus.setVariables\n    );\n  }\n\n  /**\n   * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n   *\n   * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n   */\n  public updateQuery(mapFn: UpdateQueryMapFn<TData, TVariables>): void {\n    const { queryManager } = this;\n    const { result, complete } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(\n      result! as Unmasked<TData>,\n      {\n        variables: this.variables,\n        complete: !!complete,\n        previousData: result,\n      } as UpdateQueryOptions<TData, TVariables>\n    );\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  /**\n   * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n   */\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  /**\n   * A function that instructs the query to stop polling after a previous call to `startPolling`.\n   */\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>\n  ) {\n    if (options.nextFetchPolicy) {\n      const { fetchPolicy = \"cache-first\", initialFetchPolicy = fetchPolicy } =\n        options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n    query?: DocumentNode\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    const queryInfo = this.queryManager.getOrCreateQuery(this.queryId);\n    queryInfo.setObservableQuery(this);\n    return this.queryManager[\"fetchConcastWithInfo\"](\n      queryInfo,\n      options,\n      newNetworkStatus,\n      query\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: { pollInterval },\n    } = this;\n\n    if (!pollInterval || !this.hasObservers()) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      \"Attempted to start a polling query without a polling interval.\"\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (\n          !isNetworkRequestInFlight(this.queryInfo.networkStatus) &&\n          !this.options.skipPollAttempt?.()\n        ) {\n          this.reobserve(\n            {\n              // Most fetchPolicy options don't make sense to use in a polling context, as\n              // users wouldn't want to be polling the cache directly. However, network-only and\n              // no-cache are both useful for when the user wants to control whether or not the\n              // polled results are written to the cache.\n              fetchPolicy:\n                this.options.initialFetchPolicy === \"no-cache\" ?\n                  \"no-cache\"\n                : \"network-only\",\n            },\n            NetworkStatus.poll\n          ).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables\n  ) {\n    let error: ApolloError | undefined = this.getLastError();\n    // Preserve this.last.error unless the variables have changed.\n    if (error && this.last && !equal(variables, this.last.variables)) {\n      error = void 0;\n    }\n    return (this.last = {\n      result:\n        this.queryManager.assumeImmutableResults ?\n          newResult\n        : cloneDeep(newResult),\n      variables,\n      ...(error ? { error } : null),\n    });\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options =\n      useDisposableConcast ?\n        // Disposable Concast fetches receive a shallow copy of this.options\n        // (merged with newOptions), leaving this.options unmodified.\n        mergedOptions\n      : assign(this.options, mergedOptions);\n\n    // Don't update options.query with the transformed query to avoid\n    // overwriting this.options.query when we aren't using a disposable concast.\n    // We want to ensure we can re-run the custom document transforms the next\n    // time a request is made against the original query.\n    const query = this.transformDocument(options.query);\n\n    this.lastQuery = query;\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        (options.fetchPolicy === oldFetchPolicy ||\n          // A `nextFetchPolicy` function has even higher priority, though,\n          // so in that case `applyNextFetchPolicy` must be called.\n          typeof options.nextFetchPolicy === \"function\")\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult &&= skipCacheDataFor(options.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n\n    const variables = options.variables && { ...options.variables };\n    const { concast, fromLink } = this.fetch(options, newNetworkStatus, query);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: (result) => {\n        if (equal(this.variables, variables)) {\n          finishWaitingForOwnResult();\n          this.reportResult(result, variables);\n        }\n      },\n      error: (error) => {\n        if (equal(this.variables, variables)) {\n          // Coming from `getResultsFromLink`, `error` here should always be an `ApolloError`.\n          // However, calling `concast.cancel` can inject another type of error, so we have to\n          // wrap it again here.\n          if (!isApolloError(error)) {\n            error = new ApolloError({ networkError: error });\n          }\n          finishWaitingForOwnResult();\n          this.reportError(error, variables);\n        }\n      },\n    };\n\n    if (!useDisposableConcast && (fromLink || !this.concast)) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus\n  ): Promise<ApolloQueryResult<MaybeMasked<TData>>> {\n    return preventUnhandledRejection(\n      this.reobserveAsConcast(newOptions, newNetworkStatus).promise.then(\n        this.maskResult as TODO\n      )\n    );\n  }\n\n  public resubscribeAfterError(\n    onNext: (value: ApolloQueryResult<MaybeMasked<TData>>) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(\n    observer: Observer<ApolloQueryResult<TData>>\n  ): ObservableSubscription;\n\n  public resubscribeAfterError(...args: [any, any?, any?]) {\n    // If `lastError` is set in the current when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore the last value afterwards so that the\n    // subscription has a chance to stay open.\n    const last = this.last;\n    this.resetLastResults();\n\n    const subscription = this.subscribe(...args);\n    this.last = last;\n\n    return subscription;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentFullResult(false),\n      this.variables\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined\n  ) {\n    const lastError = this.getLastError();\n    const isDifferent = this.isDifferentFromLastResult(result, variables);\n    // Update the last result even when isDifferentFromLastResult returns false,\n    // because the query may be using the @nonreactive directive, and we want to\n    // save the the latest version of any nonreactive subtrees (in case\n    // getCurrentResult is called), even though we skip broadcasting changes.\n    if (lastError || !result.partial || this.options.returnPartialData) {\n      this.updateLastResult(result, variables);\n    }\n    if (lastError || isDifferent) {\n      iterateObserversSafely(this.observers, \"next\", this.maskResult(result));\n    }\n  }\n\n  private reportError(error: ApolloError, variables: TVariables | undefined) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, \"error\", (this.last!.error = error));\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach((sub) => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n\n  private transformDocument(document: DocumentNode) {\n    return this.queryManager.transform(document);\n  }\n\n  private maskResult<T = TData>(\n    result: ApolloQueryResult<T>\n  ): ApolloQueryResult<MaybeMasked<T>> {\n    return result && \"data\" in result ?\n        {\n          ...result,\n          data: this.queryManager.maskOperation({\n            document: this.query,\n            data: result.data,\n            fetchPolicy: this.options.fetchPolicy,\n            id: this.queryId,\n          }),\n        }\n      : result;\n  }\n\n  private dirty: boolean = false;\n\n  private notifyTimeout?: ReturnType<typeof setTimeout>;\n\n  /** @internal */\n  protected resetNotifications() {\n    this.cancelNotifyTimeout();\n    this.dirty = false;\n  }\n\n  private cancelNotifyTimeout() {\n    if (this.notifyTimeout) {\n      clearTimeout(this.notifyTimeout);\n      this.notifyTimeout = void 0;\n    }\n  }\n\n  /** @internal */\n  protected scheduleNotify() {\n    if (this.dirty) return;\n    this.dirty = true;\n    if (!this.notifyTimeout) {\n      this.notifyTimeout = setTimeout(() => this.notify(), 0);\n    }\n  }\n\n  /** @internal */\n  protected notify() {\n    this.cancelNotifyTimeout();\n\n    if (this.dirty) {\n      if (\n        this.options.fetchPolicy == \"cache-only\" ||\n        this.options.fetchPolicy == \"cache-and-network\" ||\n        !isNetworkRequestInFlight(this.queryInfo.networkStatus)\n      ) {\n        const diff = this.queryInfo.getDiff();\n        if (diff.fromOptimisticTransaction) {\n          // If this diff came from an optimistic transaction, deliver the\n          // current cache data to the ObservableQuery, but don't perform a\n          // reobservation, since oq.reobserveCacheFirst might make a network\n          // request, and we never want to trigger network requests in the\n          // middle of optimistic updates.\n          this.observe();\n        } else {\n          // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n          // using a temporary fetch policy of \"cache-first\", so complete cache\n          // results have a chance to be delivered without triggering additional\n          // network requests, even when options.fetchPolicy is \"network-only\"\n          // or \"cache-and-network\". All other fetch policies are preserved by\n          // this method, and are handled by calling oq.reobserve(). If this\n          // reobservation is spurious, isDifferentFromLastResult still has a\n          // chance to catch it before delivery to ObservableQuery subscribers.\n          this.reobserveCacheFirst();\n        }\n      }\n    }\n\n    this.dirty = false;\n  }\n\n  // Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n  // delivery of any new data from the cache, possibly falling back to the network\n  // if any cache data are missing. This allows _complete_ cache results to be\n  // delivered without also kicking off unnecessary network requests when\n  // this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n  // this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n  // \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\n  private reobserveCacheFirst() {\n    const { fetchPolicy, nextFetchPolicy } = this.options;\n\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n      return this.reobserve({\n        fetchPolicy: \"cache-first\",\n        // Use a temporary nextFetchPolicy function that replaces itself with the\n        // previous nextFetchPolicy value and returns the original fetchPolicy.\n        nextFetchPolicy(\n          this: WatchQueryOptions<TVariables, TData>,\n          currentFetchPolicy: WatchQueryFetchPolicy,\n          context: NextFetchPolicyContext<TData, TVariables>\n        ) {\n          // Replace this nextFetchPolicy function in the options object with the\n          // original this.options.nextFetchPolicy value.\n          this.nextFetchPolicy = nextFetchPolicy;\n          // If the original nextFetchPolicy value was a function, give it a\n          // chance to decide what happens here.\n          if (typeof this.nextFetchPolicy === \"function\") {\n            return this.nextFetchPolicy(currentFetchPolicy, context);\n          }\n          // Otherwise go back to the original this.options.fetchPolicy.\n          return fetchPolicy!;\n        },\n      });\n    }\n\n    return this.reobserve();\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error(\"Unhandled error\", error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: %o`, missing);\n  }\n}\n\nfunction skipCacheDataFor(\n  fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */\n) {\n  return (\n    fetchPolicy === \"network-only\" ||\n    fetchPolicy === \"no-cache\" ||\n    fetchPolicy === \"standby\"\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2578, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/react/parser/index.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\n\nimport type {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode,\n} from \"graphql\";\nimport {\n  AutoCleanedWeakCache,\n  cacheSizes,\n  defaultCacheSizes,\n} from \"../../utilities/index.js\";\nimport { registerGlobalCache } from \"../../utilities/caching/getMemoryInternals.js\";\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription,\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nlet cache:\n  | undefined\n  | AutoCleanedWeakCache<\n      DocumentNode,\n      {\n        name: string;\n        type: DocumentType;\n        variables: readonly VariableDefinitionNode[];\n      }\n    >;\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = \"Query\";\n      break;\n    case DocumentType.Mutation:\n      name = \"Mutation\";\n      break;\n    case DocumentType.Subscription:\n      name = \"Subscription\";\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  if (!cache) {\n    cache = new AutoCleanedWeakCache(\n      cacheSizes.parser || defaultCacheSizes.parser\n    );\n  }\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of %s passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`,\n    document\n  );\n\n  const fragments: DefinitionNode[] = [];\n  const queries: DefinitionNode[] = [];\n  const mutations: DefinitionNode[] = [];\n  const subscriptions: DefinitionNode[] = [];\n\n  for (const x of document.definitions) {\n    if (x.kind === \"FragmentDefinition\") {\n      fragments.push(x);\n      continue;\n    }\n\n    if (x.kind === \"OperationDefinition\") {\n      switch (x.operation) {\n        case \"query\":\n          queries.push(x);\n          break;\n        case \"mutation\":\n          mutations.push(x);\n          break;\n        case \"subscription\":\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      queries.length ||\n      mutations.length ||\n      subscriptions.length,\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `%s had %s queries, %s ` +\n      `subscriptions and %s mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    queries.length,\n    subscriptions.length,\n    mutations.length\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions =\n    queries.length ? queries\n    : mutations.length ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. %s had ` +\n      `%s definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`,\n    document,\n    definitions.length\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === \"Name\") {\n    name = definition.name.value;\n  } else {\n    name = \"data\"; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nparser.resetCache = () => {\n  cache = undefined;\n};\n\nif (__DEV__) {\n  registerGlobalCache(\"parser\", () => (cache ? cache.size : 0));\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a %s requires a graphql ` + `%s, but a %s was used instead.`,\n    requiredOperationName,\n    requiredOperationName,\n    usedOperationName\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2687, "column": 0}, "map": {"version":3,"file":"useApolloClient.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/react/hooks/useApolloClient.ts"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport type { ApolloClient } from \"../../core/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\n\n/**\n * @example\n * ```jsx\n * import { useApolloClient } from '@apollo/client';\n *\n * function SomeComponent() {\n *   const client = useApolloClient();\n *   // `client` is now set to the `ApolloClient` instance being used by the\n *   // application (that was configured using something like `ApolloProvider`)\n * }\n * ```\n *\n * @since 3.0.0\n * @returns The `ApolloClient` instance being used by the application.\n */\nexport function useApolloClient(\n  override?: ApolloClient<object>\n): ApolloClient<object> {\n  const context = React.useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n      \"Wrap the root component in an <ApolloProvider>, or pass an ApolloClient \" +\n      \"instance in via options.\"\n  );\n\n  return client;\n}\n"],"names":[],"mappings":";;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,kCAAkC,CAAC;;AAC7D,OAAO,KAAK,KAAK,MAAM,SAAS,CAAC;AAEjC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;;;;AAiBjD,SAAU,eAAe,CAC7B,QAA+B;IAE/B,IAAM,OAAO,oIAAG,KAAK,CAAC,OAAA,AAAU,0KAAC,mBAAA,AAAgB,EAAE,CAAC,CAAC;IACrD,IAAM,MAAM,GAAG,QAAQ,IAAI,OAAO,CAAC,MAAM,CAAC;oMAC1C,YAAA,AAAS,EACP,CAAC,CAAC,MAAM,EACR,oEAAoE;QAClE,GAAA,uEAA0E;MAI9E,EAHI,KAGG,MAAM,CAAC,cAHgB,CAC7B,CAAC,SAEY","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2709, "column": 0}, "map": {"version":3,"file":"arrays.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/arrays.ts"],"sourcesContent":["// A version of Array.isArray that works better with readonly arrays.\nexport const isArray: (a: any) => a is any[] | readonly any[] = Array.isArray;\n\nexport function isNonEmptyArray<T>(value?: ArrayLike<T>): value is Array<T> {\n  return Array.isArray(value) && value.length > 0;\n}\n"],"names":[],"mappings":"AAAA,qEAAqE;;;;;AAC9D,IAAM,OAAO,GAA4C,KAAK,CAAC,OAAO,CAAC;AAExE,SAAU,eAAe,CAAI,KAAoB;IACrD,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AAClD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2724, "column": 0}, "map": {"version":3,"file":"maybeDeepFreeze.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/utilities/common/maybeDeepFreeze.ts"],"sourcesContent":["import { isNonNullObject } from \"./objects.js\";\n\nexport function deepFreeze(value: any) {\n  const workSet = new Set([value]);\n  workSet.forEach((obj) => {\n    if (isNonNullObject(obj) && shallowFreeze(obj) === obj) {\n      Object.getOwnPropertyNames(obj).forEach((name) => {\n        if (isNonNullObject(obj[name])) workSet.add(obj[name]);\n      });\n    }\n  });\n  return value;\n}\n\nfunction shallowFreeze<T extends object>(obj: T): T | null {\n  if (__DEV__ && !Object.isFrozen(obj)) {\n    try {\n      Object.freeze(obj);\n    } catch (e) {\n      // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but\n      // they all throw a TypeError when you try, so we re-throw any exceptions\n      // that are not TypeErrors, since that would be unexpected.\n      if (e instanceof TypeError) return null;\n      throw e;\n    }\n  }\n  return obj;\n}\n\nexport function maybeDeepFreeze<T>(obj: T): T {\n  if (__DEV__) {\n    deepFreeze(obj);\n  }\n  return obj;\n}\n"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;;AAEzC,SAAU,UAAU,CAAC,KAAU;IACnC,IAAM,OAAO,GAAG,IAAI,GAAG,CAAC;QAAC,KAAK;KAAC,CAAC,CAAC;IACjC,OAAO,CAAC,OAAO,CAAC,SAAC,GAAG;QAClB,KAAI,sLAAA,AAAe,EAAC,GAAG,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC,KAAK,GAAG,EAAE,CAAC;YACvD,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,SAAC,IAAI;gBAC3C,yKAAI,kBAAA,AAAe,EAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAS,aAAa,CAAmB,GAAM;IAC7C,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,IAAA,IAAQ,CAAC,GAAG,CAAC,CAAA,CAAE,CAAC,KAAA,QAAA,CAAA,MAAA;QACrC,IAAI,CAAC;YACH,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;YACX,wEAAwE;YACxE,yEAAyE;YACzE,2DAA2D;YAC3D,IAAI,CAAC,YAAY,SAAS,EAAE,OAAO,IAAI,CAAC;YACxC,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAEK,SAAU,eAAe,CAAI,GAAM;IACvC,IAAI,OAAO,EAAE,CAAC,CAAA,OAAA,KAAA,OAAA;QACZ,UAAU,CAAC,GAAG,CAAC,CAAC;IAClB,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2769, "column": 0}, "map": {"version":3,"file":"wrapHook.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/react/hooks/internal/wrapHook.ts"],"sourcesContent":["import type {\n  useQuery,\n  useSuspenseQuery,\n  useBackgroundQuery,\n  useReadQuery,\n  useFragment,\n  useQueryRefHandlers,\n  useSuspenseFragment,\n} from \"../index.js\";\nimport type { QueryManager } from \"../../../core/QueryManager.js\";\nimport type { ApolloClient } from \"../../../core/ApolloClient.js\";\nimport type { ObservableQuery } from \"../../../core/ObservableQuery.js\";\nimport type { createQueryPreloader } from \"../../query-preloader/createQueryPreloader.js\";\n\nconst wrapperSymbol = Symbol.for(\"apollo.hook.wrappers\");\n\ninterface WrappableHooks {\n  createQueryPreloader: typeof createQueryPreloader;\n  useQuery: typeof useQuery;\n  useSuspenseQuery: typeof useSuspenseQuery;\n  useSuspenseFragment: typeof useSuspenseFragment;\n  useBackgroundQuery: typeof useBackgroundQuery;\n  useReadQuery: typeof useReadQuery;\n  useFragment: typeof useFragment;\n  useQueryRefHandlers: typeof useQueryRefHandlers;\n}\n\n/**\n * @internal\n * Can be used to correctly type the [Symbol.for(\"apollo.hook.wrappers\")] property of\n * `QueryManager`, to override/wrap hook functionality.\n */\nexport type HookWrappers = {\n  [K in keyof WrappableHooks]?: (\n    originalHook: WrappableHooks[K]\n  ) => WrappableHooks[K];\n};\n\ninterface QueryManagerWithWrappers<T> extends QueryManager<T> {\n  [wrapperSymbol]?: HookWrappers;\n}\n\n/**\n * @internal\n *\n * Makes an Apollo Client hook \"wrappable\".\n * That means that the Apollo Client instance can expose a \"wrapper\" that will be\n * used to wrap the original hook implementation with additional logic.\n * @example\n * ```tsx\n * // this is already done in `@apollo/client` for all wrappable hooks (see `WrappableHooks`)\n * // following this pattern\n * function useQuery() {\n *   return wrapHook('useQuery', _useQuery, options.client)(query, options);\n * }\n * function _useQuery(query, options) {\n *   // original implementation\n * }\n *\n * // this is what a library like `@apollo/client-react-streaming` would do\n * class ApolloClientWithStreaming extends ApolloClient {\n *   constructor(options) {\n *     super(options);\n *     this.queryManager[Symbol.for(\"apollo.hook.wrappers\")] = {\n *       useQuery: (original) => (query, options) => {\n *         console.log(\"useQuery was called with options\", options);\n *         return original(query, options);\n *       }\n *     }\n *   }\n * }\n *\n * // this will now log the options and then call the original `useQuery`\n * const client = new ApolloClientWithStreaming({ ... });\n * useQuery(query, { client });\n * ```\n */\nexport function wrapHook<Hook extends (...args: any[]) => any>(\n  hookName: keyof WrappableHooks,\n  useHook: Hook,\n  clientOrObsQuery: ObservableQuery<any> | ApolloClient<any>\n): Hook {\n  const queryManager = (\n    clientOrObsQuery as unknown as {\n      // both `ApolloClient` and `ObservableQuery` have a `queryManager` property\n      // but they're both `private`, so we have to cast around for a bit here.\n      queryManager: QueryManagerWithWrappers<any>;\n    }\n  )[\"queryManager\"];\n  const wrappers = queryManager && queryManager[wrapperSymbol];\n  const wrapper: undefined | ((wrap: Hook) => Hook) =\n    wrappers && (wrappers[hookName] as any);\n  return wrapper ? wrapper(useHook) : useHook;\n}\n"],"names":[],"mappings":";;;AAcA,IAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AA+DnD,SAAU,QAAQ,CACtB,QAA8B,EAC9B,OAAa,EACb,gBAA0D;IAE1D,IAAM,YAAY,GAChB,gBAKD,CAAC,cAAc,CAAC,CAAC;IAClB,IAAM,QAAQ,GAAG,YAAY,IAAI,YAAY,CAAC,aAAa,CAAC,CAAC;IAC7D,IAAM,OAAO,GACX,QAAQ,IAAK,QAAQ,CAAC,QAAQ,CAAS,CAAC;IAC1C,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;AAC9C,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2785, "column": 0}, "map": {"version":3,"file":"useQuery.js","sourceRoot":"","sources":["file:///C:/Users/user/alx-graphql-0x03/alx-rick-and-morty-app/node_modules/%40apollo/src/react/hooks/useQuery.ts"],"sourcesContent":["/**\n * Function parameters in this file try to follow a common order for the sake of\n * readability and consistency. The order is as follows:\n *\n * resultData\n * observable\n * client\n * query\n * options\n * watchQueryOptions\n * makeWatchQueryOptions\n * isSSRAllowed\n * disableNetworkFetches\n * partialRefetch\n * renderPromises\n * isSyncSSR\n * callbacks\n */\n/** */\nimport { invariant } from \"../../utilities/globals/index.js\";\n\nimport * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { equal } from \"@wry/equality\";\n\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport type {\n  ApolloClient,\n  DefaultOptions,\n  OperationVariables,\n  WatchQueryFetchPolicy,\n  ApolloQueryResult,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from \"../../core/index.js\";\nimport { ObservableQuery, NetworkStatus } from \"../../core/index.js\";\nimport type {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n  NoInfer,\n} from \"../types/types.js\";\n\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport {\n  compact,\n  isNonEmptyArray,\n  maybeDeepFreeze,\n} from \"../../utilities/index.js\";\nimport { wrapHook } from \"./internal/index.js\";\nimport type { RenderPromises } from \"../ssr/RenderPromises.js\";\nimport type { MaybeMasked } from \"../../masking/index.js\";\n\nconst {\n  prototype: { hasOwnProperty },\n} = Object;\n\ntype InternalQueryResult<TData, TVariables extends OperationVariables> = Omit<\n  QueryResult<TData, TVariables>,\n  Exclude<keyof ObservableQueryFields<TData, TVariables>, \"variables\">\n>;\n\nfunction noop() {}\nconst lastWatchOptions = Symbol();\n\ninterface ObsQueryWithMeta<TData, TVariables extends OperationVariables>\n  extends ObservableQuery<TData, TVariables> {\n  [lastWatchOptions]?: WatchQueryOptions<TVariables, TData>;\n}\n\nexport interface InternalResult<TData, TVariables extends OperationVariables> {\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  current?: undefined | InternalQueryResult<TData, TVariables>;\n  previousData?: undefined | MaybeMasked<TData>;\n}\n\ninterface InternalState<TData, TVariables extends OperationVariables> {\n  client: ReturnType<typeof useApolloClient>;\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>;\n  observable: ObsQueryWithMeta<TData, TVariables>;\n  resultData: InternalResult<TData, TVariables>;\n}\n\nexport type UpdateInternalState<\n  TData,\n  TVariables extends OperationVariables,\n> = (state: InternalState<TData, TVariables>) => void;\n\ninterface Callbacks<TData> {\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  onCompleted(data: MaybeMasked<TData>): void;\n  onError(error: ApolloError): void;\n}\n\n/**\n * A hook for executing queries in an Apollo application.\n *\n * To run a query within a React component, call `useQuery` and pass it a GraphQL query document.\n *\n * When your component renders, `useQuery` returns an object from Apollo Client that contains `loading`, `error`, and `data` properties you can use to render your UI.\n *\n * > Refer to the [Queries](https://www.apollographql.com/docs/react/data/queries) section for a more in-depth overview of `useQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useQuery } from '@apollo/client';\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const { loading, error, data } = useQuery(GET_GREETING, {\n *     variables: { language: 'english' },\n *   });\n *   if (loading) return <p>Loading ...</p>;\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Options to control how the query is executed.\n * @returns Query result object\n */\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<\n    NoInfer<TData>,\n    NoInfer<TVariables>\n  > = Object.create(null)\n): QueryResult<TData, TVariables> {\n  return wrapHook(\n    \"useQuery\",\n    // eslint-disable-next-line react-compiler/react-compiler\n    useQuery_,\n    useApolloClient(options && options.client)\n  )(query, options);\n}\n\nfunction useQuery_<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const { result, obsQueryFields } = useQueryInternals(query, options);\n  return React.useMemo(\n    () => ({ ...result, ...obsQueryFields }),\n    [result, obsQueryFields]\n  );\n}\n\nfunction useInternalState<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<object>,\n  query: DocumentNode | TypedDocumentNode<any, any>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  renderPromises: RenderPromises | undefined,\n  makeWatchQueryOptions: () => WatchQueryOptions<TVariables, TData>\n) {\n  function createInternalState(previous?: InternalState<TData, TVariables>) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    const internalState: InternalState<TData, TVariables> = {\n      client,\n      query,\n      observable:\n        // See if there is an existing observable that was used to fetch the same\n        // data and if so, use it instead since it will contain the proper queryId\n        // to fetch the result set. This is used during SSR.\n        (renderPromises &&\n          renderPromises.getSSRObservable(makeWatchQueryOptions())) ||\n        ObservableQuery[\"inactiveOnCreation\"].withValue(!renderPromises, () =>\n          client.watchQuery(\n            getObsQueryOptions(void 0, client, options, makeWatchQueryOptions())\n          )\n        ),\n      resultData: {\n        // Reuse previousData from previous InternalState (if any) to provide\n        // continuity of previousData even if/when the query or client changes.\n        previousData: previous?.resultData.current?.data,\n      },\n    };\n\n    return internalState as InternalState<TData, TVariables>;\n  }\n\n  let [internalState, updateInternalState] =\n    React.useState(createInternalState);\n\n  /**\n   * Used by `useLazyQuery` when a new query is executed.\n   * We keep this logic here since it needs to update things in unsafe\n   * ways and here we at least can keep track of that in a single place.\n   */\n  function onQueryExecuted(\n    watchQueryOptions: WatchQueryOptions<TVariables, TData>\n  ) {\n    // this needs to be set to prevent an immediate `resubscribe` in the\n    // next rerender of the `useQuery` internals\n    Object.assign(internalState.observable, {\n      [lastWatchOptions]: watchQueryOptions,\n    });\n    const resultData = internalState.resultData;\n    updateInternalState({\n      ...internalState,\n      // might be a different query\n      query: watchQueryOptions.query,\n      resultData: Object.assign(resultData, {\n        // We need to modify the previous `resultData` object as we rely on the\n        // object reference in other places\n        previousData: resultData.current?.data || resultData.previousData,\n        current: undefined,\n      }),\n    });\n  }\n\n  if (client !== internalState.client || query !== internalState.query) {\n    // If the client or query have changed, we need to create a new InternalState.\n    // This will trigger a re-render with the new state, but it will also continue\n    // to run the current render function to completion.\n    // Since we sometimes trigger some side-effects in the render function, we\n    // re-assign `state` to the new state to ensure that those side-effects are\n    // triggered with the new state.\n    const newInternalState = createInternalState(internalState);\n    updateInternalState(newInternalState);\n    return [newInternalState, onQueryExecuted] as const;\n  }\n\n  return [internalState, onQueryExecuted] as const;\n}\n\nexport function useQueryInternals<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n) {\n  const client = useApolloClient(options.client);\n\n  const renderPromises = React.useContext(getApolloContext()).renderPromises;\n  const isSyncSSR = !!renderPromises;\n  const disableNetworkFetches = client.disableNetworkFetches;\n  const ssrAllowed = options.ssr !== false && !options.skip;\n  const partialRefetch = options.partialRefetch;\n\n  const makeWatchQueryOptions = createMakeWatchQueryOptions(\n    client,\n    query,\n    options,\n    isSyncSSR\n  );\n\n  const [{ observable, resultData }, onQueryExecuted] = useInternalState(\n    client,\n    query,\n    options,\n    renderPromises,\n    makeWatchQueryOptions\n  );\n\n  const watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>> =\n    makeWatchQueryOptions(observable);\n\n  useResubscribeIfNecessary<TData, TVariables>(\n    resultData, // might get mutated during render\n    observable, // might get mutated during render\n    client,\n    options,\n    watchQueryOptions\n  );\n\n  const obsQueryFields = React.useMemo(\n    () => bindObservableMethods(observable),\n    [observable]\n  );\n\n  useRegisterSSRObservable(observable, renderPromises, ssrAllowed);\n\n  const result = useObservableSubscriptionResult<TData, TVariables>(\n    resultData,\n    observable,\n    client,\n    options,\n    watchQueryOptions,\n    disableNetworkFetches,\n    partialRefetch,\n    isSyncSSR,\n    {\n      onCompleted: options.onCompleted || noop,\n      onError: options.onError || noop,\n    }\n  );\n\n  return {\n    result,\n    obsQueryFields,\n    observable,\n    resultData,\n    client,\n    onQueryExecuted,\n  };\n}\n\nfunction useObservableSubscriptionResult<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>>,\n  disableNetworkFetches: boolean,\n  partialRefetch: boolean | undefined,\n  isSyncSSR: boolean,\n  callbacks: {\n    onCompleted: (data: MaybeMasked<TData>) => void;\n    onError: (error: ApolloError) => void;\n  }\n) {\n  const callbackRef = React.useRef<Callbacks<TData>>(callbacks);\n  React.useEffect(() => {\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    // eslint-disable-next-line react-compiler/react-compiler\n    callbackRef.current = callbacks;\n  });\n\n  const resultOverride =\n    (\n      (isSyncSSR || disableNetworkFetches) &&\n      options.ssr === false &&\n      !options.skip\n    ) ?\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      ssrDisabledResult\n    : options.skip || watchQueryOptions.fetchPolicy === \"standby\" ?\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      skipStandbyResult\n    : void 0;\n\n  const previousData = resultData.previousData;\n  const currentResultOverride = React.useMemo(\n    () =>\n      resultOverride &&\n      toQueryResult(resultOverride, previousData, observable, client),\n    [client, observable, resultOverride, previousData]\n  );\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (handleStoreChange) => {\n        // reference `disableNetworkFetches` here to ensure that the rules of hooks\n        // keep it as a dependency of this effect, even though it's not used\n        disableNetworkFetches;\n\n        if (isSyncSSR) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = resultData.current;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = observable.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          setResult(\n            result,\n            resultData,\n            observable,\n            client,\n            partialRefetch,\n            handleStoreChange,\n            callbackRef.current\n          );\n        };\n\n        const onError = (error: Error) => {\n          subscription.current.unsubscribe();\n          subscription.current = observable.resubscribeAfterError(\n            onNext,\n            onError\n          );\n\n          if (!hasOwnProperty.call(error, \"graphQLErrors\")) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = resultData.current;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            setResult(\n              {\n                data: (previousResult &&\n                  previousResult.data) as MaybeMasked<TData>,\n                error: error as ApolloError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n              },\n              resultData,\n              observable,\n              client,\n              partialRefetch,\n              handleStoreChange,\n              callbackRef.current\n            );\n          }\n        };\n\n        // TODO evaluate if we keep this in\n        // React Compiler cannot handle scoped `let` access, but a mutable object\n        // like this is fine.\n        // was:\n        // let subscription = observable.subscribe(onNext, onError);\n        const subscription = { current: observable.subscribe(onNext, onError) };\n\n        // Do the \"unsubscribe\" with a short delay.\n        // This way, an existing subscription can be reused without an additional\n        // request if \"unsubscribe\"  and \"resubscribe\" to the same ObservableQuery\n        // happen in very fast succession.\n        return () => {\n          setTimeout(() => subscription.current.unsubscribe());\n        };\n      },\n\n      [\n        disableNetworkFetches,\n        isSyncSSR,\n        observable,\n        resultData,\n        partialRefetch,\n        client,\n      ]\n    ),\n    () =>\n      currentResultOverride ||\n      getCurrentResult(\n        resultData,\n        observable,\n        callbackRef.current,\n        partialRefetch,\n        client\n      ),\n    () =>\n      currentResultOverride ||\n      getCurrentResult(\n        resultData,\n        observable,\n        callbackRef.current,\n        partialRefetch,\n        client\n      )\n  );\n}\n\nfunction useRegisterSSRObservable(\n  observable: ObsQueryWithMeta<any, any>,\n  renderPromises: RenderPromises | undefined,\n  ssrAllowed: boolean\n) {\n  if (renderPromises && ssrAllowed) {\n    renderPromises.registerSSRObservable(observable);\n\n    if (observable.getCurrentResult().loading) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      renderPromises.addObservableQueryPromise(observable);\n    }\n  }\n}\n\n// this hook is not compatible with any rules of React, and there's no good way to rewrite it.\n// it should stay a separate hook that will not be optimized by the compiler\nfunction useResubscribeIfNecessary<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  /** this hook will mutate properties on `resultData` */\n  resultData: InternalResult<TData, TVariables>,\n  /** this hook will mutate properties on `observable` */\n  observable: ObsQueryWithMeta<TData, TVariables>,\n  client: ApolloClient<object>,\n  options: QueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>,\n  watchQueryOptions: Readonly<WatchQueryOptions<TVariables, TData>>\n) {\n  if (\n    observable[lastWatchOptions] &&\n    !equal(observable[lastWatchOptions], watchQueryOptions)\n  ) {\n    // Though it might be tempting to postpone this reobserve call to the\n    // useEffect block, we need getCurrentResult to return an appropriate\n    // loading:true result synchronously (later within the same call to\n    // useQuery). Since we already have this.observable here (not true for\n    // the very first call to useQuery), we are not initiating any new\n    // subscriptions, though it does feel less than ideal that reobserve\n    // (potentially) kicks off a network request (for example, when the\n    // variables have changed), which is technically a side-effect.\n    observable.reobserve(\n      getObsQueryOptions(observable, client, options, watchQueryOptions)\n    );\n\n    // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n    // but save the current data as this.previousData, just like setResult\n    // usually does.\n    resultData.previousData =\n      resultData.current?.data || resultData.previousData;\n    resultData.current = void 0;\n  }\n  observable[lastWatchOptions] = watchQueryOptions;\n}\n\n/*\n * A function to massage options before passing them to ObservableQuery.\n * This is two-step curried because we want to reuse the `make` function,\n * but the `observable` might differ between calls to `make`.\n */\nexport function createMakeWatchQueryOptions<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  client: ApolloClient<object>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {},\n  isSyncSSR: boolean\n) {\n  return (\n    observable?: ObservableQuery<TData, TVariables>\n  ): WatchQueryOptions<TVariables, TData> => {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query });\n\n    if (\n      isSyncSSR &&\n      (watchQueryOptions.fetchPolicy === \"network-only\" ||\n        watchQueryOptions.fetchPolicy === \"cache-and-network\")\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = \"cache-first\";\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      watchQueryOptions.initialFetchPolicy =\n        watchQueryOptions.initialFetchPolicy ||\n        watchQueryOptions.fetchPolicy ||\n        getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n      watchQueryOptions.fetchPolicy = \"standby\";\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        observable?.options.initialFetchPolicy ||\n        getDefaultFetchPolicy(defaultOptions, client.defaultOptions);\n    }\n\n    return watchQueryOptions;\n  };\n}\n\nexport function getObsQueryOptions<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  observable: ObservableQuery<TData, TVariables> | undefined,\n  client: ApolloClient<object>,\n  queryHookOptions: QueryHookOptions<TData, TVariables>,\n  watchQueryOptions: Partial<WatchQueryOptions<TVariables, TData>>\n): WatchQueryOptions<TVariables, TData> {\n  const toMerge: Array<Partial<WatchQueryOptions<TVariables, TData>>> = [];\n\n  const globalDefaults = client.defaultOptions.watchQuery;\n  if (globalDefaults) toMerge.push(globalDefaults);\n\n  if (queryHookOptions.defaultOptions) {\n    toMerge.push(queryHookOptions.defaultOptions);\n  }\n\n  // We use compact rather than mergeOptions for this part of the merge,\n  // because we want watchQueryOptions.variables (if defined) to replace\n  // this.observable.options.variables whole. This replacement allows\n  // removing variables by removing them from the variables input to\n  // useQuery. If the variables were always merged together (rather than\n  // replaced), there would be no way to remove existing variables.\n  // However, the variables from options.defaultOptions and globalDefaults\n  // (if provided) should be merged, to ensure individual defaulted\n  // variables always have values, if not otherwise defined in\n  // observable.options or watchQueryOptions.\n  toMerge.push(compact(observable && observable.options, watchQueryOptions));\n\n  return toMerge.reduce(mergeOptions) as WatchQueryOptions<TVariables, TData>;\n}\n\nfunction setResult<TData, TVariables extends OperationVariables>(\n  nextResult: ApolloQueryResult<MaybeMasked<TData>>,\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>,\n  partialRefetch: boolean | undefined,\n  forceUpdate: () => void,\n  callbacks: Callbacks<TData>\n) {\n  const previousResult = resultData.current;\n  if (previousResult && previousResult.data) {\n    resultData.previousData = previousResult.data;\n  }\n\n  if (!nextResult.error && isNonEmptyArray(nextResult.errors)) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    nextResult.error = new ApolloError({ graphQLErrors: nextResult.errors });\n  }\n\n  resultData.current = toQueryResult(\n    unsafeHandlePartialRefetch(nextResult, observable, partialRefetch),\n    resultData.previousData,\n    observable,\n    client\n  );\n  // Calling state.setResult always triggers an update, though some call sites\n  // perform additional equality checks before committing to an update.\n  forceUpdate();\n  handleErrorOrCompleted(nextResult, previousResult?.networkStatus, callbacks);\n}\n\nfunction handleErrorOrCompleted<TData>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  previousNetworkStatus: NetworkStatus | undefined,\n  callbacks: Callbacks<TData>\n) {\n  if (!result.loading) {\n    const error = toApolloError(result);\n\n    // wait a tick in case we are in the middle of rendering a component\n    Promise.resolve()\n      .then(() => {\n        if (error) {\n          callbacks.onError(error);\n        } else if (\n          result.data &&\n          previousNetworkStatus !== result.networkStatus &&\n          result.networkStatus === NetworkStatus.ready\n        ) {\n          callbacks.onCompleted(result.data);\n        }\n      })\n      .catch((error) => {\n        invariant.warn(error);\n      });\n  }\n}\n\nfunction getCurrentResult<TData, TVariables extends OperationVariables>(\n  resultData: InternalResult<TData, TVariables>,\n  observable: ObservableQuery<TData, TVariables>,\n  callbacks: Callbacks<TData>,\n  partialRefetch: boolean | undefined,\n  client: ApolloClient<object>\n): InternalQueryResult<TData, TVariables> {\n  // Using this.result as a cache ensures getCurrentResult continues returning\n  // the same (===) result object, unless state.setResult has been called, or\n  // we're doing server rendering and therefore override the result below.\n  if (!resultData.current) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    // this could call unsafeHandlePartialRefetch\n    setResult(\n      observable.getCurrentResult(),\n      resultData,\n      observable,\n      client,\n      partialRefetch,\n      () => {},\n      callbacks\n    );\n  }\n  return resultData.current!;\n}\n\nexport function getDefaultFetchPolicy<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  queryHookDefaultOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n  clientDefaultOptions?: DefaultOptions\n): WatchQueryFetchPolicy {\n  return (\n    queryHookDefaultOptions?.fetchPolicy ||\n    clientDefaultOptions?.watchQuery?.fetchPolicy ||\n    \"cache-first\"\n  );\n}\n\nexport function toApolloError<TData>(\n  result: Pick<ApolloQueryResult<TData>, \"errors\" | \"error\">\n): ApolloError | undefined {\n  return isNonEmptyArray(result.errors) ?\n      new ApolloError({ graphQLErrors: result.errors })\n    : result.error;\n}\n\nexport function toQueryResult<TData, TVariables extends OperationVariables>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  previousData: MaybeMasked<TData> | undefined,\n  observable: ObservableQuery<TData, TVariables>,\n  client: ApolloClient<object>\n): InternalQueryResult<TData, TVariables> {\n  const { data, partial, ...resultWithoutPartial } = result;\n  const queryResult: InternalQueryResult<TData, TVariables> = {\n    data, // Ensure always defined, even if result.data is missing.\n    ...resultWithoutPartial,\n    client: client,\n    observable: observable,\n    variables: observable.variables,\n    called: result !== ssrDisabledResult && result !== skipStandbyResult,\n    previousData,\n  };\n  return queryResult;\n}\n\nfunction unsafeHandlePartialRefetch<\n  TData,\n  TVariables extends OperationVariables,\n>(\n  result: ApolloQueryResult<MaybeMasked<TData>>,\n  observable: ObservableQuery<TData, TVariables>,\n  partialRefetch: boolean | undefined\n): ApolloQueryResult<MaybeMasked<TData>> {\n  // TODO: This code should be removed when the partialRefetch option is\n  // removed. I was unable to get this hook to behave reasonably in certain\n  // edge cases when this block was put in an effect.\n  if (\n    result.partial &&\n    partialRefetch &&\n    !result.loading &&\n    (!result.data || Object.keys(result.data).length === 0) &&\n    observable.options.fetchPolicy !== \"cache-only\"\n  ) {\n    observable.refetch();\n    return {\n      ...result,\n      loading: true,\n      networkStatus: NetworkStatus.refetch,\n    };\n  }\n  return result;\n}\n\nconst ssrDisabledResult = maybeDeepFreeze({\n  loading: true,\n  data: void 0 as any,\n  error: void 0,\n  networkStatus: NetworkStatus.loading,\n});\n\nconst skipStandbyResult = maybeDeepFreeze({\n  loading: false,\n  data: void 0 as any,\n  error: void 0,\n  networkStatus: NetworkStatus.ready,\n});\n\nfunction bindObservableMethods<TData, TVariables extends OperationVariables>(\n  observable: ObservableQuery<TData, TVariables>\n): Omit<ObservableQueryFields<TData, TVariables>, \"variables\"> {\n  return {\n    refetch: observable.refetch.bind(observable),\n    reobserve: observable.reobserve.bind(observable),\n    fetchMore: observable.fetchMore.bind(observable),\n    updateQuery: observable.updateQuery.bind(observable),\n    startPolling: observable.startPolling.bind(observable),\n    stopPolling: observable.stopPolling.bind(observable),\n    subscribeToMore: observable.subscribeToMore.bind(observable),\n  };\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}